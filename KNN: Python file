{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "## import libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir('/users/mayurbansal/downloads/')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv('purchase_credit_card.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 442458 entries, 0 to 442457\n",
      "Data columns (total 11 columns):\n",
      "Year-Month                      442458 non-null int64\n",
      "Agency Number                   442458 non-null int64\n",
      "Agency Name                     442458 non-null object\n",
      "Cardholder Last Name            442458 non-null object\n",
      "Cardholder First Initial        442458 non-null object\n",
      "Description                     442458 non-null object\n",
      "Amount                          442458 non-null float64\n",
      "Vendor                          442458 non-null object\n",
      "Transaction Date                442458 non-null object\n",
      "Posted Date                     442458 non-null object\n",
      "Merchant Category Code (MCC)    442458 non-null object\n",
      "dtypes: float64(1), int64(2), object(8)\n",
      "memory usage: 37.1+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 0.4 million entries and 12 features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Year-Month\n",
      "Agency Number\n",
      "Agency Name\n",
      "Cardholder Last Name\n",
      "Cardholder First Initial\n",
      "Description\n",
      "Amount\n",
      "Vendor\n",
      "Transaction Date\n",
      "Posted Date\n",
      "Merchant Category Code (MCC)\n"
     ]
    }
   ],
   "source": [
    "#get column names\n",
    "for col in data.columns: \n",
    "    print(col) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We have information on Year and Month of transaction, Agency Number, Agency name, Cardholder Name, Description of purchase, amount of purchase, Vendor, Merchant Category code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year-Month</th>\n",
       "      <th>Agency Number</th>\n",
       "      <th>Agency Name</th>\n",
       "      <th>Cardholder Last Name</th>\n",
       "      <th>Cardholder First Initial</th>\n",
       "      <th>Description</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Vendor</th>\n",
       "      <th>Transaction Date</th>\n",
       "      <th>Posted Date</th>\n",
       "      <th>Merchant Category Code (MCC)</th>\n",
       "      <th>FullName</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>890.00</td>\n",
       "      <td>NACAS</td>\n",
       "      <td>07/30/2013 12:00:00 AM</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>CHARITABLE AND SOCIAL SERVICE ORGANIZATIONS</td>\n",
       "      <td>C Mason</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>ROOM CHARGES</td>\n",
       "      <td>368.96</td>\n",
       "      <td>SHERATON HOTEL</td>\n",
       "      <td>07/30/2013 12:00:00 AM</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>SHERATON</td>\n",
       "      <td>C Mason</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Massey</td>\n",
       "      <td>J</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>165.82</td>\n",
       "      <td>SEARS.COM 9300</td>\n",
       "      <td>07/29/2013 12:00:00 AM</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>DIRCT MARKETING/DIRCT MARKETERS--NOT ELSEWHERE...</td>\n",
       "      <td>J Massey</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Massey</td>\n",
       "      <td>T</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>96.39</td>\n",
       "      <td>WAL-MART #0137</td>\n",
       "      <td>07/30/2013 12:00:00 AM</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>GROCERY STORES,AND SUPERMARKETS</td>\n",
       "      <td>T Massey</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mauro-Herrera</td>\n",
       "      <td>M</td>\n",
       "      <td>HAMMERMILL COPY PLUS COPY EA</td>\n",
       "      <td>125.96</td>\n",
       "      <td>STAPLES DIRECT</td>\n",
       "      <td>07/30/2013 12:00:00 AM</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>STATIONERY, OFFICE SUPPLIES, PRINTING AND WRIT...</td>\n",
       "      <td>M Mauro-Herrera</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year-Month  Agency Number                Agency Name Cardholder Last Name  \\\n",
       "0      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "1      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "2      201307           1000  OKLAHOMA STATE UNIVERSITY               Massey   \n",
       "3      201307           1000  OKLAHOMA STATE UNIVERSITY               Massey   \n",
       "4      201307           1000  OKLAHOMA STATE UNIVERSITY        Mauro-Herrera   \n",
       "\n",
       "  Cardholder First Initial                   Description  Amount  \\\n",
       "0                        C              GENERAL PURCHASE  890.00   \n",
       "1                        C                  ROOM CHARGES  368.96   \n",
       "2                        J              GENERAL PURCHASE  165.82   \n",
       "3                        T              GENERAL PURCHASE   96.39   \n",
       "4                        M  HAMMERMILL COPY PLUS COPY EA  125.96   \n",
       "\n",
       "           Vendor        Transaction Date             Posted Date  \\\n",
       "0           NACAS  07/30/2013 12:00:00 AM  07/31/2013 12:00:00 AM   \n",
       "1  SHERATON HOTEL  07/30/2013 12:00:00 AM  07/31/2013 12:00:00 AM   \n",
       "2  SEARS.COM 9300  07/29/2013 12:00:00 AM  07/31/2013 12:00:00 AM   \n",
       "3  WAL-MART #0137  07/30/2013 12:00:00 AM  07/31/2013 12:00:00 AM   \n",
       "4  STAPLES DIRECT  07/30/2013 12:00:00 AM  07/31/2013 12:00:00 AM   \n",
       "\n",
       "                        Merchant Category Code (MCC)         FullName  \n",
       "0        CHARITABLE AND SOCIAL SERVICE ORGANIZATIONS          C Mason  \n",
       "1                                           SHERATON          C Mason  \n",
       "2  DIRCT MARKETING/DIRCT MARKETERS--NOT ELSEWHERE...         J Massey  \n",
       "3                    GROCERY STORES,AND SUPERMARKETS         T Massey  \n",
       "4  STATIONERY, OFFICE SUPPLIES, PRINTING AND WRIT...  M Mauro-Herrera  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# feature 1: use full name to represent each person uniquely\n",
    "data['FullName']=data['Cardholder First Initial'].str.cat(data['Cardholder Last Name'],sep=\" \")\n",
    "data.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feature 1 is the fullname of the customer making the transaction to uniquely identify customers\n",
    "#### Let us explore the transaction date feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int64')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Year-Month'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('O')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Transaction Date'].dtype\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#convert transaction date column to a datetime structure\n",
    "data['Transaction Date'] = pd.to_datetime(data['Transaction Date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#new columns related to transaction date\n",
    "data['yearoftransaction'] = pd.DatetimeIndex(data['Transaction Date']).year\n",
    "data['monthoftransaction'] = pd.DatetimeIndex(data['Transaction Date']).month\n",
    "data['dateoftransaction'] = pd.DatetimeIndex(data['Transaction Date']).day\n",
    "data['weekdayoftransaction'] = pd.DatetimeIndex(data['Transaction Date']).weekday"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year-Month</th>\n",
       "      <th>Agency Number</th>\n",
       "      <th>Agency Name</th>\n",
       "      <th>Cardholder Last Name</th>\n",
       "      <th>Cardholder First Initial</th>\n",
       "      <th>Description</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Vendor</th>\n",
       "      <th>Transaction Date</th>\n",
       "      <th>Posted Date</th>\n",
       "      <th>Merchant Category Code (MCC)</th>\n",
       "      <th>FullName</th>\n",
       "      <th>yearoftransaction</th>\n",
       "      <th>monthoftransaction</th>\n",
       "      <th>dateoftransaction</th>\n",
       "      <th>weekdayoftransaction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>890.00</td>\n",
       "      <td>NACAS</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>CHARITABLE AND SOCIAL SERVICE ORGANIZATIONS</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>ROOM CHARGES</td>\n",
       "      <td>368.96</td>\n",
       "      <td>SHERATON HOTEL</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>SHERATON</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Massey</td>\n",
       "      <td>J</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>165.82</td>\n",
       "      <td>SEARS.COM 9300</td>\n",
       "      <td>2013-07-29</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>DIRCT MARKETING/DIRCT MARKETERS--NOT ELSEWHERE...</td>\n",
       "      <td>J Massey</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Massey</td>\n",
       "      <td>T</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>96.39</td>\n",
       "      <td>WAL-MART #0137</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>GROCERY STORES,AND SUPERMARKETS</td>\n",
       "      <td>T Massey</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mauro-Herrera</td>\n",
       "      <td>M</td>\n",
       "      <td>HAMMERMILL COPY PLUS COPY EA</td>\n",
       "      <td>125.96</td>\n",
       "      <td>STAPLES DIRECT</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>STATIONERY, OFFICE SUPPLIES, PRINTING AND WRIT...</td>\n",
       "      <td>M Mauro-Herrera</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year-Month  Agency Number                Agency Name Cardholder Last Name  \\\n",
       "0      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "1      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "2      201307           1000  OKLAHOMA STATE UNIVERSITY               Massey   \n",
       "3      201307           1000  OKLAHOMA STATE UNIVERSITY               Massey   \n",
       "4      201307           1000  OKLAHOMA STATE UNIVERSITY        Mauro-Herrera   \n",
       "\n",
       "  Cardholder First Initial                   Description  Amount  \\\n",
       "0                        C              GENERAL PURCHASE  890.00   \n",
       "1                        C                  ROOM CHARGES  368.96   \n",
       "2                        J              GENERAL PURCHASE  165.82   \n",
       "3                        T              GENERAL PURCHASE   96.39   \n",
       "4                        M  HAMMERMILL COPY PLUS COPY EA  125.96   \n",
       "\n",
       "           Vendor Transaction Date             Posted Date  \\\n",
       "0           NACAS       2013-07-30  07/31/2013 12:00:00 AM   \n",
       "1  SHERATON HOTEL       2013-07-30  07/31/2013 12:00:00 AM   \n",
       "2  SEARS.COM 9300       2013-07-29  07/31/2013 12:00:00 AM   \n",
       "3  WAL-MART #0137       2013-07-30  07/31/2013 12:00:00 AM   \n",
       "4  STAPLES DIRECT       2013-07-30  07/31/2013 12:00:00 AM   \n",
       "\n",
       "                        Merchant Category Code (MCC)         FullName  \\\n",
       "0        CHARITABLE AND SOCIAL SERVICE ORGANIZATIONS          C Mason   \n",
       "1                                           SHERATON          C Mason   \n",
       "2  DIRCT MARKETING/DIRCT MARKETERS--NOT ELSEWHERE...         J Massey   \n",
       "3                    GROCERY STORES,AND SUPERMARKETS         T Massey   \n",
       "4  STATIONERY, OFFICE SUPPLIES, PRINTING AND WRIT...  M Mauro-Herrera   \n",
       "\n",
       "   yearoftransaction  monthoftransaction  dateoftransaction  \\\n",
       "0               2013                   7                 30   \n",
       "1               2013                   7                 30   \n",
       "2               2013                   7                 29   \n",
       "3               2013                   7                 30   \n",
       "4               2013                   7                 30   \n",
       "\n",
       "   weekdayoftransaction  \n",
       "0                     1  \n",
       "1                     1  \n",
       "2                     0  \n",
       "3                     1  \n",
       "4                     1  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Features are created around transaction date which is transformed into more granular timeframes like Year, Month, date and week day of transaction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>yearoftransaction</th>\n",
       "      <th>monthoftransaction</th>\n",
       "      <th>dateoftransaction</th>\n",
       "      <th>weekdayoftransaction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   yearoftransaction  monthoftransaction  dateoftransaction  \\\n",
       "0               2013                   7                 30   \n",
       "1               2013                   7                 30   \n",
       "2               2013                   7                 29   \n",
       "3               2013                   7                 30   \n",
       "4               2013                   7                 30   \n",
       "\n",
       "   weekdayoftransaction  \n",
       "0                     1  \n",
       "1                     1  \n",
       "2                     0  \n",
       "3                     1  \n",
       "4                     1  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[['yearoftransaction','monthoftransaction','dateoftransaction','weekdayoftransaction']].head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "## remove negative amounts from analysis \n",
    "data=data[data['Amount'] > 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### I am ignoring the negative amounts in my analyis as these are mainly refund or cashback values and for fraud detection we are not concerned with these amounts."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Features are created based on monthly transactions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>monthoftransaction</th>\n",
       "      <th>FullName</th>\n",
       "      <th>monthlyspent</th>\n",
       "      <th>monthlycountoftrans</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2 24100</td>\n",
       "      <td>0.77</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4 42000</td>\n",
       "      <td>250.14</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>A ADMIRE</td>\n",
       "      <td>253.12</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>A Adams</td>\n",
       "      <td>150.84</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>A Adkins</td>\n",
       "      <td>771.77</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   monthoftransaction  FullName  monthlyspent  monthlycountoftrans\n",
       "0                   1   2 24100          0.77                    1\n",
       "1                   1   4 42000        250.14                    2\n",
       "2                   1  A ADMIRE        253.12                    4\n",
       "3                   1   A Adams        150.84                    3\n",
       "4                   1  A Adkins        771.77                    3"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## monthly transactions by name\n",
    "monthly=data.groupby(['monthoftransaction','FullName']).agg({'Amount':'sum','FullName':'count'}).rename(\n",
    "columns={'Amount':'monthlyspent',\n",
    "        'FullName':'monthlycountoftrans'}).reset_index()\n",
    "\n",
    "monthly.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Total money spent by each user is stored and number of accompanying transactions are noted as well"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "##merge with data\n",
    "data_ver2=pd.merge(data,monthly,on=['FullName','monthoftransaction'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_ver2['fracofmonthlyspending']=data_ver2['Amount']/data_ver2['monthlyspent']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fraction of monthly spending spent on each particular transaction is noted. The idea is to look for monthly buying behaviour of users. A bigger fraction of monthly transaction on a particular transaction may reveal more insights for detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year-Month</th>\n",
       "      <th>Agency Number</th>\n",
       "      <th>Agency Name</th>\n",
       "      <th>Cardholder Last Name</th>\n",
       "      <th>Cardholder First Initial</th>\n",
       "      <th>Description</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Vendor</th>\n",
       "      <th>Transaction Date</th>\n",
       "      <th>Posted Date</th>\n",
       "      <th>Merchant Category Code (MCC)</th>\n",
       "      <th>FullName</th>\n",
       "      <th>yearoftransaction</th>\n",
       "      <th>monthoftransaction</th>\n",
       "      <th>dateoftransaction</th>\n",
       "      <th>weekdayoftransaction</th>\n",
       "      <th>monthlyspent</th>\n",
       "      <th>monthlycountoftrans</th>\n",
       "      <th>fracofmonthlyspending</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>890.00</td>\n",
       "      <td>NACAS</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>CHARITABLE AND SOCIAL SERVICE ORGANIZATIONS</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.040680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>ROOM CHARGES</td>\n",
       "      <td>368.96</td>\n",
       "      <td>SHERATON HOTEL</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>SHERATON</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.016864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>890.00</td>\n",
       "      <td>NACAS</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>CHARITABLE AND SOCIAL SERVICE ORGANIZATIONS</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.040680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>324.00</td>\n",
       "      <td>SHERATON HOTEL</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>SHERATON</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.014809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>337.02</td>\n",
       "      <td>HOLIDAY INN EXPRESS</td>\n",
       "      <td>2013-07-21</td>\n",
       "      <td>07/30/2013 12:00:00 AM</td>\n",
       "      <td>HOLIDAY INNS</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>21</td>\n",
       "      <td>6</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.015405</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year-Month  Agency Number                Agency Name Cardholder Last Name  \\\n",
       "0      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "1      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "2      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "3      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "4      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "\n",
       "  Cardholder First Initial       Description  Amount               Vendor  \\\n",
       "0                        C  GENERAL PURCHASE  890.00                NACAS   \n",
       "1                        C      ROOM CHARGES  368.96       SHERATON HOTEL   \n",
       "2                        C  GENERAL PURCHASE  890.00                NACAS   \n",
       "3                        C  GENERAL PURCHASE  324.00       SHERATON HOTEL   \n",
       "4                        C  GENERAL PURCHASE  337.02  HOLIDAY INN EXPRESS   \n",
       "\n",
       "  Transaction Date             Posted Date  \\\n",
       "0       2013-07-30  07/31/2013 12:00:00 AM   \n",
       "1       2013-07-30  07/31/2013 12:00:00 AM   \n",
       "2       2013-07-30  07/31/2013 12:00:00 AM   \n",
       "3       2013-07-30  07/31/2013 12:00:00 AM   \n",
       "4       2013-07-21  07/30/2013 12:00:00 AM   \n",
       "\n",
       "                  Merchant Category Code (MCC) FullName  yearoftransaction  \\\n",
       "0  CHARITABLE AND SOCIAL SERVICE ORGANIZATIONS  C Mason               2013   \n",
       "1                                     SHERATON  C Mason               2013   \n",
       "2  CHARITABLE AND SOCIAL SERVICE ORGANIZATIONS  C Mason               2013   \n",
       "3                                     SHERATON  C Mason               2013   \n",
       "4                                 HOLIDAY INNS  C Mason               2013   \n",
       "\n",
       "   monthoftransaction  dateoftransaction  weekdayoftransaction  monthlyspent  \\\n",
       "0                   7                 30                     1      21877.94   \n",
       "1                   7                 30                     1      21877.94   \n",
       "2                   7                 30                     1      21877.94   \n",
       "3                   7                 30                     1      21877.94   \n",
       "4                   7                 21                     6      21877.94   \n",
       "\n",
       "   monthlycountoftrans  fracofmonthlyspending  \n",
       "0                   46               0.040680  \n",
       "1                   46               0.016864  \n",
       "2                   46               0.040680  \n",
       "3                   46               0.014809  \n",
       "4                   46               0.015405  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_ver2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Merchant Category Code (MCC)</th>\n",
       "      <th>FullName</th>\n",
       "      <th>spentbycategory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td>E Becker</td>\n",
       "      <td>702.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td>G UNIVERSITY AMERICAN</td>\n",
       "      <td>180.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>ACCOUNTING,AUDITING AND BOOKKEEPING SERVICES</td>\n",
       "      <td>A Doyle</td>\n",
       "      <td>100.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>ACCOUNTING,AUDITING AND BOOKKEEPING SERVICES</td>\n",
       "      <td>A Fesmire</td>\n",
       "      <td>1946.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>ACCOUNTING,AUDITING AND BOOKKEEPING SERVICES</td>\n",
       "      <td>A Maib</td>\n",
       "      <td>13480.50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Merchant Category Code (MCC)               FullName  \\\n",
       "0                                                             E Becker   \n",
       "1                                                G UNIVERSITY AMERICAN   \n",
       "2  ACCOUNTING,AUDITING AND BOOKKEEPING SERVICES                A Doyle   \n",
       "3  ACCOUNTING,AUDITING AND BOOKKEEPING SERVICES              A Fesmire   \n",
       "4  ACCOUNTING,AUDITING AND BOOKKEEPING SERVICES                 A Maib   \n",
       "\n",
       "   spentbycategory  \n",
       "0           702.38  \n",
       "1           180.70  \n",
       "2           100.00  \n",
       "3          1946.83  \n",
       "4         13480.50  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## transactions by merchant\n",
    "bymerchantspent=data.groupby(['Merchant Category Code (MCC)','FullName']).agg({'Amount':'sum'}).rename(\n",
    "columns={'Amount':'spentbycategory'}).reset_index()\n",
    "\n",
    "bymerchantspent.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "##merge with data\n",
    "data_ver3=pd.merge(data_ver2,bymerchantspent,on=['FullName','Merchant Category Code (MCC)'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year-Month</th>\n",
       "      <th>Agency Number</th>\n",
       "      <th>Agency Name</th>\n",
       "      <th>Cardholder Last Name</th>\n",
       "      <th>Cardholder First Initial</th>\n",
       "      <th>Description</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Vendor</th>\n",
       "      <th>Transaction Date</th>\n",
       "      <th>Posted Date</th>\n",
       "      <th>Merchant Category Code (MCC)</th>\n",
       "      <th>FullName</th>\n",
       "      <th>yearoftransaction</th>\n",
       "      <th>monthoftransaction</th>\n",
       "      <th>dateoftransaction</th>\n",
       "      <th>weekdayoftransaction</th>\n",
       "      <th>monthlyspent</th>\n",
       "      <th>monthlycountoftrans</th>\n",
       "      <th>fracofmonthlyspending</th>\n",
       "      <th>spentbycategory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>890.00</td>\n",
       "      <td>NACAS</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>CHARITABLE AND SOCIAL SERVICE ORGANIZATIONS</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.040680</td>\n",
       "      <td>1780.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>890.00</td>\n",
       "      <td>NACAS</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>CHARITABLE AND SOCIAL SERVICE ORGANIZATIONS</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.040680</td>\n",
       "      <td>1780.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>ROOM CHARGES</td>\n",
       "      <td>368.96</td>\n",
       "      <td>SHERATON HOTEL</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>SHERATON</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.016864</td>\n",
       "      <td>4257.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>324.00</td>\n",
       "      <td>SHERATON HOTEL</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>SHERATON</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.014809</td>\n",
       "      <td>4257.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>ROOM CHARGES</td>\n",
       "      <td>432.24</td>\n",
       "      <td>SHERATON DALLAS</td>\n",
       "      <td>2013-07-10</td>\n",
       "      <td>07/12/2013 12:00:00 AM</td>\n",
       "      <td>SHERATON</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.019757</td>\n",
       "      <td>4257.29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year-Month  Agency Number                Agency Name Cardholder Last Name  \\\n",
       "0      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "1      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "2      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "3      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "4      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "\n",
       "  Cardholder First Initial       Description  Amount           Vendor  \\\n",
       "0                        C  GENERAL PURCHASE  890.00            NACAS   \n",
       "1                        C  GENERAL PURCHASE  890.00            NACAS   \n",
       "2                        C      ROOM CHARGES  368.96   SHERATON HOTEL   \n",
       "3                        C  GENERAL PURCHASE  324.00   SHERATON HOTEL   \n",
       "4                        C      ROOM CHARGES  432.24  SHERATON DALLAS   \n",
       "\n",
       "  Transaction Date             Posted Date  \\\n",
       "0       2013-07-30  07/31/2013 12:00:00 AM   \n",
       "1       2013-07-30  07/31/2013 12:00:00 AM   \n",
       "2       2013-07-30  07/31/2013 12:00:00 AM   \n",
       "3       2013-07-30  07/31/2013 12:00:00 AM   \n",
       "4       2013-07-10  07/12/2013 12:00:00 AM   \n",
       "\n",
       "                  Merchant Category Code (MCC) FullName  yearoftransaction  \\\n",
       "0  CHARITABLE AND SOCIAL SERVICE ORGANIZATIONS  C Mason               2013   \n",
       "1  CHARITABLE AND SOCIAL SERVICE ORGANIZATIONS  C Mason               2013   \n",
       "2                                     SHERATON  C Mason               2013   \n",
       "3                                     SHERATON  C Mason               2013   \n",
       "4                                     SHERATON  C Mason               2013   \n",
       "\n",
       "   monthoftransaction  dateoftransaction  weekdayoftransaction  monthlyspent  \\\n",
       "0                   7                 30                     1      21877.94   \n",
       "1                   7                 30                     1      21877.94   \n",
       "2                   7                 30                     1      21877.94   \n",
       "3                   7                 30                     1      21877.94   \n",
       "4                   7                 10                     2      21877.94   \n",
       "\n",
       "   monthlycountoftrans  fracofmonthlyspending  spentbycategory  \n",
       "0                   46               0.040680          1780.00  \n",
       "1                   46               0.040680          1780.00  \n",
       "2                   46               0.016864          4257.29  \n",
       "3                   46               0.014809          4257.29  \n",
       "4                   46               0.019757          4257.29  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_ver3.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_ver3['fracofmerchantspending']=data_ver3['Amount']/data_ver3['spentbycategory']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year-Month</th>\n",
       "      <th>Agency Number</th>\n",
       "      <th>Agency Name</th>\n",
       "      <th>Cardholder Last Name</th>\n",
       "      <th>Cardholder First Initial</th>\n",
       "      <th>Description</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Vendor</th>\n",
       "      <th>Transaction Date</th>\n",
       "      <th>Posted Date</th>\n",
       "      <th>...</th>\n",
       "      <th>FullName</th>\n",
       "      <th>yearoftransaction</th>\n",
       "      <th>monthoftransaction</th>\n",
       "      <th>dateoftransaction</th>\n",
       "      <th>weekdayoftransaction</th>\n",
       "      <th>monthlyspent</th>\n",
       "      <th>monthlycountoftrans</th>\n",
       "      <th>fracofmonthlyspending</th>\n",
       "      <th>spentbycategory</th>\n",
       "      <th>fracofmerchantspending</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>890.00</td>\n",
       "      <td>NACAS</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.040680</td>\n",
       "      <td>1780.00</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>890.00</td>\n",
       "      <td>NACAS</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.040680</td>\n",
       "      <td>1780.00</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>ROOM CHARGES</td>\n",
       "      <td>368.96</td>\n",
       "      <td>SHERATON HOTEL</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.016864</td>\n",
       "      <td>4257.29</td>\n",
       "      <td>0.086665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>324.00</td>\n",
       "      <td>SHERATON HOTEL</td>\n",
       "      <td>2013-07-30</td>\n",
       "      <td>07/31/2013 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.014809</td>\n",
       "      <td>4257.29</td>\n",
       "      <td>0.076105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>201307</td>\n",
       "      <td>1000</td>\n",
       "      <td>OKLAHOMA STATE UNIVERSITY</td>\n",
       "      <td>Mason</td>\n",
       "      <td>C</td>\n",
       "      <td>ROOM CHARGES</td>\n",
       "      <td>432.24</td>\n",
       "      <td>SHERATON DALLAS</td>\n",
       "      <td>2013-07-10</td>\n",
       "      <td>07/12/2013 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>C Mason</td>\n",
       "      <td>2013</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>21877.94</td>\n",
       "      <td>46</td>\n",
       "      <td>0.019757</td>\n",
       "      <td>4257.29</td>\n",
       "      <td>0.101529</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year-Month  Agency Number                Agency Name Cardholder Last Name  \\\n",
       "0      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "1      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "2      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "3      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "4      201307           1000  OKLAHOMA STATE UNIVERSITY                Mason   \n",
       "\n",
       "  Cardholder First Initial       Description  Amount           Vendor  \\\n",
       "0                        C  GENERAL PURCHASE  890.00            NACAS   \n",
       "1                        C  GENERAL PURCHASE  890.00            NACAS   \n",
       "2                        C      ROOM CHARGES  368.96   SHERATON HOTEL   \n",
       "3                        C  GENERAL PURCHASE  324.00   SHERATON HOTEL   \n",
       "4                        C      ROOM CHARGES  432.24  SHERATON DALLAS   \n",
       "\n",
       "  Transaction Date             Posted Date  ... FullName yearoftransaction  \\\n",
       "0       2013-07-30  07/31/2013 12:00:00 AM  ...  C Mason              2013   \n",
       "1       2013-07-30  07/31/2013 12:00:00 AM  ...  C Mason              2013   \n",
       "2       2013-07-30  07/31/2013 12:00:00 AM  ...  C Mason              2013   \n",
       "3       2013-07-30  07/31/2013 12:00:00 AM  ...  C Mason              2013   \n",
       "4       2013-07-10  07/12/2013 12:00:00 AM  ...  C Mason              2013   \n",
       "\n",
       "   monthoftransaction  dateoftransaction  weekdayoftransaction  monthlyspent  \\\n",
       "0                   7                 30                     1      21877.94   \n",
       "1                   7                 30                     1      21877.94   \n",
       "2                   7                 30                     1      21877.94   \n",
       "3                   7                 30                     1      21877.94   \n",
       "4                   7                 10                     2      21877.94   \n",
       "\n",
       "   monthlycountoftrans  fracofmonthlyspending  spentbycategory  \\\n",
       "0                   46               0.040680          1780.00   \n",
       "1                   46               0.040680          1780.00   \n",
       "2                   46               0.016864          4257.29   \n",
       "3                   46               0.014809          4257.29   \n",
       "4                   46               0.019757          4257.29   \n",
       "\n",
       "   fracofmerchantspending  \n",
       "0                0.500000  \n",
       "1                0.500000  \n",
       "2                0.086665  \n",
       "3                0.076105  \n",
       "4                0.101529  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_ver3.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Features for spending habits of users on each merchant category are created. Includes a feature on how much total money each user is spending on each category and how it is distributed in each transaction through fraction of merchant spending"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Year-Month\n",
      "Agency Number\n",
      "Agency Name\n",
      "Cardholder Last Name\n",
      "Cardholder First Initial\n",
      "Description\n",
      "Amount\n",
      "Vendor\n",
      "Transaction Date\n",
      "Posted Date\n",
      "Merchant Category Code (MCC)\n",
      "FullName\n",
      "yearoftransaction\n",
      "monthoftransaction\n",
      "dateoftransaction\n",
      "weekdayoftransaction\n",
      "monthlyspent\n",
      "monthlycountoftrans\n",
      "fracofmonthlyspending\n",
      "spentbycategory\n",
      "fracofmerchantspending\n"
     ]
    }
   ],
   "source": [
    "for col in data_ver3.columns: \n",
    "    print(col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature on each successive transaction made by each user based on time between each transaction\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Time since last purchase\n",
    "data_ver4 = data_ver3.sort_values(by=['FullName','Transaction Date'])\n",
    "data_ver4['time_diff'] = data_ver4.groupby(['FullName'])['Transaction Date'].diff()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature on each successive transaction made by each user based on amount spent\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "## amount difference in successive transactions per user\n",
    "data_ver4['amount_diff'] = data_ver4.groupby(['FullName'])['Amount'].diff()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Converting time difference in days\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_ver4['time_diff_days']=data_ver4['time_diff'].dt.days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year-Month</th>\n",
       "      <th>Agency Number</th>\n",
       "      <th>Agency Name</th>\n",
       "      <th>Cardholder Last Name</th>\n",
       "      <th>Cardholder First Initial</th>\n",
       "      <th>Description</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Vendor</th>\n",
       "      <th>Transaction Date</th>\n",
       "      <th>Posted Date</th>\n",
       "      <th>...</th>\n",
       "      <th>dateoftransaction</th>\n",
       "      <th>weekdayoftransaction</th>\n",
       "      <th>monthlyspent</th>\n",
       "      <th>monthlycountoftrans</th>\n",
       "      <th>fracofmonthlyspending</th>\n",
       "      <th>spentbycategory</th>\n",
       "      <th>fracofmerchantspending</th>\n",
       "      <th>time_diff</th>\n",
       "      <th>amount_diff</th>\n",
       "      <th>time_diff_days</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>406074</td>\n",
       "      <td>201404</td>\n",
       "      <td>15000</td>\n",
       "      <td>UNIV.OF SCIENCE &amp; ARTS OF OK</td>\n",
       "      <td>15000</td>\n",
       "      <td>1</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>4626.46</td>\n",
       "      <td>PAYMENT ADJUSTMENT</td>\n",
       "      <td>2014-03-10</td>\n",
       "      <td>04/07/2014 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>4626.46</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4626.46</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>155799</td>\n",
       "      <td>201307</td>\n",
       "      <td>24100</td>\n",
       "      <td>REDLANDS COMMUNITY COLLEGE</td>\n",
       "      <td>24100</td>\n",
       "      <td>2</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>16.90</td>\n",
       "      <td>PURCHASE  FINANCE CHARGE</td>\n",
       "      <td>2013-07-15</td>\n",
       "      <td>07/15/2013 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1812.99</td>\n",
       "      <td>2</td>\n",
       "      <td>0.009322</td>\n",
       "      <td>2819.38</td>\n",
       "      <td>0.005994</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>155800</td>\n",
       "      <td>201307</td>\n",
       "      <td>24100</td>\n",
       "      <td>REDLANDS COMMUNITY COLLEGE</td>\n",
       "      <td>24100</td>\n",
       "      <td>2</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>1796.09</td>\n",
       "      <td>LATE PAYMENT FEE</td>\n",
       "      <td>2013-07-25</td>\n",
       "      <td>07/25/2013 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "      <td>1812.99</td>\n",
       "      <td>2</td>\n",
       "      <td>0.990678</td>\n",
       "      <td>2819.38</td>\n",
       "      <td>0.637051</td>\n",
       "      <td>10 days</td>\n",
       "      <td>1779.19</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>155801</td>\n",
       "      <td>201308</td>\n",
       "      <td>24100</td>\n",
       "      <td>REDLANDS COMMUNITY COLLEGE</td>\n",
       "      <td>24100</td>\n",
       "      <td>2</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>14.53</td>\n",
       "      <td>PURCHASE  FINANCE CHARGE</td>\n",
       "      <td>2013-08-15</td>\n",
       "      <td>08/15/2013 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>3</td>\n",
       "      <td>749.03</td>\n",
       "      <td>2</td>\n",
       "      <td>0.019398</td>\n",
       "      <td>2819.38</td>\n",
       "      <td>0.005154</td>\n",
       "      <td>21 days</td>\n",
       "      <td>-1781.56</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>155802</td>\n",
       "      <td>201308</td>\n",
       "      <td>24100</td>\n",
       "      <td>REDLANDS COMMUNITY COLLEGE</td>\n",
       "      <td>24100</td>\n",
       "      <td>2</td>\n",
       "      <td>GENERAL PURCHASE</td>\n",
       "      <td>734.50</td>\n",
       "      <td>LATE PAYMENT FEE</td>\n",
       "      <td>2013-08-26</td>\n",
       "      <td>08/26/2013 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>749.03</td>\n",
       "      <td>2</td>\n",
       "      <td>0.980602</td>\n",
       "      <td>2819.38</td>\n",
       "      <td>0.260518</td>\n",
       "      <td>11 days</td>\n",
       "      <td>719.97</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Year-Month  Agency Number                   Agency Name  \\\n",
       "406074      201404          15000  UNIV.OF SCIENCE & ARTS OF OK   \n",
       "155799      201307          24100    REDLANDS COMMUNITY COLLEGE   \n",
       "155800      201307          24100    REDLANDS COMMUNITY COLLEGE   \n",
       "155801      201308          24100    REDLANDS COMMUNITY COLLEGE   \n",
       "155802      201308          24100    REDLANDS COMMUNITY COLLEGE   \n",
       "\n",
       "       Cardholder Last Name Cardholder First Initial       Description  \\\n",
       "406074                15000                        1  GENERAL PURCHASE   \n",
       "155799                24100                        2  GENERAL PURCHASE   \n",
       "155800                24100                        2  GENERAL PURCHASE   \n",
       "155801                24100                        2  GENERAL PURCHASE   \n",
       "155802                24100                        2  GENERAL PURCHASE   \n",
       "\n",
       "         Amount                    Vendor Transaction Date  \\\n",
       "406074  4626.46        PAYMENT ADJUSTMENT       2014-03-10   \n",
       "155799    16.90  PURCHASE  FINANCE CHARGE       2013-07-15   \n",
       "155800  1796.09          LATE PAYMENT FEE       2013-07-25   \n",
       "155801    14.53  PURCHASE  FINANCE CHARGE       2013-08-15   \n",
       "155802   734.50          LATE PAYMENT FEE       2013-08-26   \n",
       "\n",
       "                   Posted Date  ... dateoftransaction weekdayoftransaction  \\\n",
       "406074  04/07/2014 12:00:00 AM  ...                10                    0   \n",
       "155799  07/15/2013 12:00:00 AM  ...                15                    0   \n",
       "155800  07/25/2013 12:00:00 AM  ...                25                    3   \n",
       "155801  08/15/2013 12:00:00 AM  ...                15                    3   \n",
       "155802  08/26/2013 12:00:00 AM  ...                26                    0   \n",
       "\n",
       "        monthlyspent  monthlycountoftrans  fracofmonthlyspending  \\\n",
       "406074       4626.46                    1               1.000000   \n",
       "155799       1812.99                    2               0.009322   \n",
       "155800       1812.99                    2               0.990678   \n",
       "155801        749.03                    2               0.019398   \n",
       "155802        749.03                    2               0.980602   \n",
       "\n",
       "        spentbycategory  fracofmerchantspending  time_diff  amount_diff  \\\n",
       "406074          4626.46                1.000000        NaT          NaN   \n",
       "155799          2819.38                0.005994        NaT          NaN   \n",
       "155800          2819.38                0.637051    10 days      1779.19   \n",
       "155801          2819.38                0.005154    21 days     -1781.56   \n",
       "155802          2819.38                0.260518    11 days       719.97   \n",
       "\n",
       "        time_diff_days  \n",
       "406074             NaN  \n",
       "155799             NaN  \n",
       "155800            10.0  \n",
       "155801            21.0  \n",
       "155802            11.0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_ver4.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The idea behind these features is that a fraudster tries to make a lot of payments quickly (prob in the same day multiple times) which could be analyzed through the time_diff feature. To accompany it, we have amount difference. A large amount diff value and a small time difference value would require in depth study for possible anomaly cases\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Year-Month\n",
      "Agency Number\n",
      "Agency Name\n",
      "Cardholder Last Name\n",
      "Cardholder First Initial\n",
      "Description\n",
      "Amount\n",
      "Vendor\n",
      "Transaction Date\n",
      "Posted Date\n",
      "Merchant Category Code (MCC)\n",
      "FullName\n",
      "yearoftransaction\n",
      "monthoftransaction\n",
      "dateoftransaction\n",
      "weekdayoftransaction\n",
      "monthlyspent\n",
      "monthlycountoftrans\n",
      "fracofmonthlyspending\n",
      "spentbycategory\n",
      "fracofmerchantspending\n",
      "time_diff\n",
      "amount_diff\n",
      "time_diff_days\n"
     ]
    }
   ],
   "source": [
    "for col in data_ver4:\n",
    "    print(col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Grouping our data on FullName and Merchant category to aggregate data and perform clustering\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_draft=data_ver4.groupby(['FullName','Merchant Category Code (MCC)']).agg({'Amount':'mean','monthlyspent':'mean','fracofmonthlyspending':'mean','fracofmerchantspending':'mean','amount_diff':'mean','time_diff_days':'mean'}).rename(\n",
    "columns={'Amount':'MeanAmount',\n",
    "        'monthlyspent':'monthlymeanbycat',\n",
    "        'fracofmonthlyspending':'meanfracmonth',\n",
    "        'fracofmerchantspending':'meanfracmerchant',\n",
    "        'amount_diff':'meanamountdiff',\n",
    "        'time_diff_days':'meantimediff'}).reset_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### I witness some missing data in the meanamount diff and meantimediff columns. These are cases when a particular user has just one transaction in one category. We can look these cases seperately as these do not raise an alarm. Dropping these points from my analysis for now\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FullName</th>\n",
       "      <th>Merchant Category Code (MCC)</th>\n",
       "      <th>MeanAmount</th>\n",
       "      <th>monthlymeanbycat</th>\n",
       "      <th>meanfracmonth</th>\n",
       "      <th>meanfracmerchant</th>\n",
       "      <th>meanamountdiff</th>\n",
       "      <th>meantimediff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1 15000</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>4626.460000</td>\n",
       "      <td>4626.460000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2 24100</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>313.264444</td>\n",
       "      <td>625.715556</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>-2.111250</td>\n",
       "      <td>30.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>4 42000</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>133.998125</td>\n",
       "      <td>252.165625</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>0.062500</td>\n",
       "      <td>-0.060667</td>\n",
       "      <td>22.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4 44600</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>111.990000</td>\n",
       "      <td>111.990000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4 48000</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>137.639091</td>\n",
       "      <td>229.230000</td>\n",
       "      <td>0.636364</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>21.300000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  FullName Merchant Category Code (MCC)   MeanAmount  monthlymeanbycat  \\\n",
       "0  1 15000                   OTHER FEES  4626.460000       4626.460000   \n",
       "1  2 24100                   OTHER FEES   313.264444        625.715556   \n",
       "2  4 42000                   OTHER FEES   133.998125        252.165625   \n",
       "3  4 44600                   OTHER FEES   111.990000        111.990000   \n",
       "4  4 48000                   OTHER FEES   137.639091        229.230000   \n",
       "\n",
       "   meanfracmonth  meanfracmerchant  meanamountdiff  meantimediff  \n",
       "0       1.000000          1.000000             NaN           NaN  \n",
       "1       0.666667          0.111111       -2.111250     30.250000  \n",
       "2       0.625000          0.062500       -0.060667     22.333333  \n",
       "3       1.000000          1.000000             NaN           NaN  \n",
       "4       0.636364          0.090909        0.000000     21.300000  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_draft.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analyzing amounts by Merchant category code\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "groupmerch=data.groupby('Merchant Category Code (MCC)') \\\n",
    "  .apply(lambda x: pd.Series({\n",
    "      'amount_mean_cat'       : x['Amount'].mean()\n",
    "  })\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>amount_mean_cat</th>\n",
       "      <th>Merchant Category Code (MCC)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Merchant Category Code (MCC)</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>GENERAL CONTRACTORS-RESIDENTIAL AND COMMERCIAL</td>\n",
       "      <td>4929.668492</td>\n",
       "      <td>GENERAL CONTRACTORS-RESIDENTIAL AND COMMERCIAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>WYNN LAS VEGAS</td>\n",
       "      <td>3797.920000</td>\n",
       "      <td>WYNN LAS VEGAS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MERIDIEN</td>\n",
       "      <td>3484.685000</td>\n",
       "      <td>MERIDIEN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>3356.076963</td>\n",
       "      <td>OTHER FEES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PETROLEUM AND PETROLEUM PRODUCTS</td>\n",
       "      <td>3184.617742</td>\n",
       "      <td>PETROLEUM AND PETROLEUM PRODUCTS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>AIRLINES AND AIR CARRIERS</td>\n",
       "      <td>29.744157</td>\n",
       "      <td>AIRLINES AND AIR CARRIERS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MOBILE HOME DEALERS</td>\n",
       "      <td>25.675000</td>\n",
       "      <td>MOBILE HOME DEALERS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PAWN SHOPS</td>\n",
       "      <td>20.993333</td>\n",
       "      <td>PAWN SHOPS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>SHOE REPR SHPS,SHOE SHINE PARLRS,AND HAT CLEANING SHPS</td>\n",
       "      <td>20.970000</td>\n",
       "      <td>SHOE REPR SHPS,SHOE SHINE PARLRS,AND HAT CLEAN...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>EXTENDED STAY AMERICA</td>\n",
       "      <td>19.990000</td>\n",
       "      <td>EXTENDED STAY AMERICA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>434 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    amount_mean_cat  \\\n",
       "Merchant Category Code (MCC)                                          \n",
       "GENERAL CONTRACTORS-RESIDENTIAL AND COMMERCIAL          4929.668492   \n",
       "WYNN LAS VEGAS                                          3797.920000   \n",
       "MERIDIEN                                                3484.685000   \n",
       "OTHER FEES                                              3356.076963   \n",
       "PETROLEUM AND PETROLEUM PRODUCTS                        3184.617742   \n",
       "...                                                             ...   \n",
       "AIRLINES AND AIR CARRIERS                                 29.744157   \n",
       "MOBILE HOME DEALERS                                       25.675000   \n",
       "PAWN SHOPS                                                20.993333   \n",
       "SHOE REPR SHPS,SHOE SHINE PARLRS,AND HAT CLEANI...        20.970000   \n",
       "EXTENDED STAY AMERICA                                     19.990000   \n",
       "\n",
       "                                                                         Merchant Category Code (MCC)  \n",
       "Merchant Category Code (MCC)                                                                           \n",
       "GENERAL CONTRACTORS-RESIDENTIAL AND COMMERCIAL         GENERAL CONTRACTORS-RESIDENTIAL AND COMMERCIAL  \n",
       "WYNN LAS VEGAS                                                                         WYNN LAS VEGAS  \n",
       "MERIDIEN                                                                                     MERIDIEN  \n",
       "OTHER FEES                                                                                 OTHER FEES  \n",
       "PETROLEUM AND PETROLEUM PRODUCTS                                     PETROLEUM AND PETROLEUM PRODUCTS  \n",
       "...                                                                                               ...  \n",
       "AIRLINES AND AIR CARRIERS                                                   AIRLINES AND AIR CARRIERS  \n",
       "MOBILE HOME DEALERS                                                               MOBILE HOME DEALERS  \n",
       "PAWN SHOPS                                                                                 PAWN SHOPS  \n",
       "SHOE REPR SHPS,SHOE SHINE PARLRS,AND HAT CLEANI...  SHOE REPR SHPS,SHOE SHINE PARLRS,AND HAT CLEAN...  \n",
       "EXTENDED STAY AMERICA                                                           EXTENDED STAY AMERICA  \n",
       "\n",
       "[434 rows x 2 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "groupmerch['Merchant Category Code (MCC)']=groupmerch.index\n",
    "groupmerch.sort_values('amount_mean_cat',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "groupmerch=groupmerch.rename(columns={groupmerch.columns[1]: \"mcc\"})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>amount_mean_cat</th>\n",
       "      <th>mcc</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Merchant Category Code (MCC)</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td></td>\n",
       "      <td>294.360000</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ACCOUNTING,AUDITING AND BOOKKEEPING SERVICES</td>\n",
       "      <td>858.910326</td>\n",
       "      <td>ACCOUNTING,AUDITING AND BOOKKEEPING SERVICES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ADVANTAGE RENT A CAR</td>\n",
       "      <td>785.830000</td>\n",
       "      <td>ADVANTAGE RENT A CAR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ADVERTISING SERVICES</td>\n",
       "      <td>508.086428</td>\n",
       "      <td>ADVERTISING SERVICES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>AER LINGUS</td>\n",
       "      <td>757.944286</td>\n",
       "      <td>AER LINGUS</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              amount_mean_cat  \\\n",
       "Merchant Category Code (MCC)                                    \n",
       "                                                   294.360000   \n",
       "ACCOUNTING,AUDITING AND BOOKKEEPING SERVICES       858.910326   \n",
       "ADVANTAGE RENT A CAR                               785.830000   \n",
       "ADVERTISING SERVICES                               508.086428   \n",
       "AER LINGUS                                         757.944286   \n",
       "\n",
       "                                                                                       mcc  \n",
       "Merchant Category Code (MCC)                                                                \n",
       "                                                                                            \n",
       "ACCOUNTING,AUDITING AND BOOKKEEPING SERVICES  ACCOUNTING,AUDITING AND BOOKKEEPING SERVICES  \n",
       "ADVANTAGE RENT A CAR                                                  ADVANTAGE RENT A CAR  \n",
       "ADVERTISING SERVICES                                                  ADVERTISING SERVICES  \n",
       "AER LINGUS                                                                      AER LINGUS  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "groupmerch.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "mergeddata=pd.merge(data_draft,groupmerch,how='inner',left_on='Merchant Category Code (MCC)',right_on='mcc')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FullName</th>\n",
       "      <th>Merchant Category Code (MCC)</th>\n",
       "      <th>MeanAmount</th>\n",
       "      <th>monthlymeanbycat</th>\n",
       "      <th>meanfracmonth</th>\n",
       "      <th>meanfracmerchant</th>\n",
       "      <th>meanamountdiff</th>\n",
       "      <th>meantimediff</th>\n",
       "      <th>amount_mean_cat</th>\n",
       "      <th>mcc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1 15000</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>4626.460000</td>\n",
       "      <td>4626.460000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3356.076963</td>\n",
       "      <td>OTHER FEES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2 24100</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>313.264444</td>\n",
       "      <td>625.715556</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>-2.111250</td>\n",
       "      <td>30.250000</td>\n",
       "      <td>3356.076963</td>\n",
       "      <td>OTHER FEES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>4 42000</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>133.998125</td>\n",
       "      <td>252.165625</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>0.062500</td>\n",
       "      <td>-0.060667</td>\n",
       "      <td>22.333333</td>\n",
       "      <td>3356.076963</td>\n",
       "      <td>OTHER FEES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4 44600</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>111.990000</td>\n",
       "      <td>111.990000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3356.076963</td>\n",
       "      <td>OTHER FEES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4 48000</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>137.639091</td>\n",
       "      <td>229.230000</td>\n",
       "      <td>0.636364</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>21.300000</td>\n",
       "      <td>3356.076963</td>\n",
       "      <td>OTHER FEES</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  FullName Merchant Category Code (MCC)   MeanAmount  monthlymeanbycat  \\\n",
       "0  1 15000                   OTHER FEES  4626.460000       4626.460000   \n",
       "1  2 24100                   OTHER FEES   313.264444        625.715556   \n",
       "2  4 42000                   OTHER FEES   133.998125        252.165625   \n",
       "3  4 44600                   OTHER FEES   111.990000        111.990000   \n",
       "4  4 48000                   OTHER FEES   137.639091        229.230000   \n",
       "\n",
       "   meanfracmonth  meanfracmerchant  meanamountdiff  meantimediff  \\\n",
       "0       1.000000          1.000000             NaN           NaN   \n",
       "1       0.666667          0.111111       -2.111250     30.250000   \n",
       "2       0.625000          0.062500       -0.060667     22.333333   \n",
       "3       1.000000          1.000000             NaN           NaN   \n",
       "4       0.636364          0.090909        0.000000     21.300000   \n",
       "\n",
       "   amount_mean_cat         mcc  \n",
       "0      3356.076963  OTHER FEES  \n",
       "1      3356.076963  OTHER FEES  \n",
       "2      3356.076963  OTHER FEES  \n",
       "3      3356.076963  OTHER FEES  \n",
       "4      3356.076963  OTHER FEES  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mergeddata.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature: Coefficient of Deviation (Baseline comparison of each user based on each merchant category)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "## coefficient of deviation (meanamountperuserpercategory/meanamountpercategory)\n",
    "mergeddata['coeffofdeviation']=mergeddata['MeanAmount']/mergeddata['amount_mean_cat']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FullName</th>\n",
       "      <th>Merchant Category Code (MCC)</th>\n",
       "      <th>MeanAmount</th>\n",
       "      <th>monthlymeanbycat</th>\n",
       "      <th>meanfracmonth</th>\n",
       "      <th>meanfracmerchant</th>\n",
       "      <th>meanamountdiff</th>\n",
       "      <th>meantimediff</th>\n",
       "      <th>amount_mean_cat</th>\n",
       "      <th>mcc</th>\n",
       "      <th>coeffofdeviation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>30119</td>\n",
       "      <td>G Hunter</td>\n",
       "      <td>COMPUTER NETWORK/INFORMATION SERVICES</td>\n",
       "      <td>107598.650000</td>\n",
       "      <td>212485.500000</td>\n",
       "      <td>0.506381</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>101474.630000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>284.877182</td>\n",
       "      <td>COMPUTER NETWORK/INFORMATION SERVICES</td>\n",
       "      <td>377.701890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>37258</td>\n",
       "      <td>C Johnson</td>\n",
       "      <td>CHEMICALS AND ALLIED PRODUCTS NOT ELSEWHERE CL...</td>\n",
       "      <td>216721.312500</td>\n",
       "      <td>526472.752500</td>\n",
       "      <td>0.472541</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>215576.612500</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>722.089295</td>\n",
       "      <td>CHEMICALS AND ALLIED PRODUCTS NOT ELSEWHERE CL...</td>\n",
       "      <td>300.130904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>7 77000</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>913559.627500</td>\n",
       "      <td>913559.667500</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>-583459.966667</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>3356.076963</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>272.210571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>46042</td>\n",
       "      <td>G Hunter</td>\n",
       "      <td>TELECOMMUNICATION SERVICES</td>\n",
       "      <td>63748.300000</td>\n",
       "      <td>69872.320000</td>\n",
       "      <td>0.912354</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>56708.300000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>321.877022</td>\n",
       "      <td>TELECOMMUNICATION SERVICES</td>\n",
       "      <td>198.051727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19494</td>\n",
       "      <td>L JOHNSON</td>\n",
       "      <td>DIRCT MARKETING/DIRCT MARKETERS--NOT ELSEWHERE...</td>\n",
       "      <td>103101.570000</td>\n",
       "      <td>103101.570000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>96132.650000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>713.386012</td>\n",
       "      <td>DIRCT MARKETING/DIRCT MARKETERS--NOT ELSEWHERE...</td>\n",
       "      <td>144.524238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>94</td>\n",
       "      <td>J BRAUNBECK</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>0.080000</td>\n",
       "      <td>3494.488333</td>\n",
       "      <td>0.000029</td>\n",
       "      <td>0.083333</td>\n",
       "      <td>-117.349167</td>\n",
       "      <td>2.083333</td>\n",
       "      <td>3356.076963</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>0.000024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>108</td>\n",
       "      <td>J MCCASKILL</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>0.070000</td>\n",
       "      <td>3976.710000</td>\n",
       "      <td>0.000018</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-6.580000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3356.076963</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>0.000021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>93</td>\n",
       "      <td>J BRAUN</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>0.066667</td>\n",
       "      <td>1873.023333</td>\n",
       "      <td>0.000170</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>-7.506667</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>3356.076963</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>0.000020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>47766</td>\n",
       "      <td>R HILL</td>\n",
       "      <td>ADVERTISING SERVICES</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>32.260000</td>\n",
       "      <td>0.000310</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-32.240000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>508.086428</td>\n",
       "      <td>ADVERTISING SERVICES</td>\n",
       "      <td>0.000020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>5 53000</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3356.076963</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>0.000012</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>68867 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          FullName                       Merchant Category Code (MCC)  \\\n",
       "30119     G Hunter              COMPUTER NETWORK/INFORMATION SERVICES   \n",
       "37258    C Johnson  CHEMICALS AND ALLIED PRODUCTS NOT ELSEWHERE CL...   \n",
       "9          7 77000                                         OTHER FEES   \n",
       "46042     G Hunter                         TELECOMMUNICATION SERVICES   \n",
       "19494    L JOHNSON  DIRCT MARKETING/DIRCT MARKETERS--NOT ELSEWHERE...   \n",
       "...            ...                                                ...   \n",
       "94     J BRAUNBECK                                         OTHER FEES   \n",
       "108    J MCCASKILL                                         OTHER FEES   \n",
       "93         J BRAUN                                         OTHER FEES   \n",
       "47766       R HILL                               ADVERTISING SERVICES   \n",
       "5          5 53000                                         OTHER FEES   \n",
       "\n",
       "          MeanAmount  monthlymeanbycat  meanfracmonth  meanfracmerchant  \\\n",
       "30119  107598.650000     212485.500000       0.506381          1.000000   \n",
       "37258  216721.312500     526472.752500       0.472541          0.250000   \n",
       "9      913559.627500     913559.667500       0.750000          0.250000   \n",
       "46042   63748.300000      69872.320000       0.912354          1.000000   \n",
       "19494  103101.570000     103101.570000       1.000000          1.000000   \n",
       "...              ...               ...            ...               ...   \n",
       "94          0.080000       3494.488333       0.000029          0.083333   \n",
       "108         0.070000       3976.710000       0.000018          1.000000   \n",
       "93          0.066667       1873.023333       0.000170          0.333333   \n",
       "47766       0.010000         32.260000       0.000310          1.000000   \n",
       "5           0.040000          0.040000       1.000000          1.000000   \n",
       "\n",
       "       meanamountdiff  meantimediff  amount_mean_cat  \\\n",
       "30119   101474.630000     12.000000       284.877182   \n",
       "37258   215576.612500      1.500000       722.089295   \n",
       "9      -583459.966667     98.000000      3356.076963   \n",
       "46042    56708.300000     16.000000       321.877022   \n",
       "19494    96132.650000     80.000000       713.386012   \n",
       "...               ...           ...              ...   \n",
       "94        -117.349167      2.083333      3356.076963   \n",
       "108         -6.580000      1.000000      3356.076963   \n",
       "93          -7.506667      2.333333      3356.076963   \n",
       "47766      -32.240000      7.000000       508.086428   \n",
       "5                 NaN           NaN      3356.076963   \n",
       "\n",
       "                                                     mcc  coeffofdeviation  \n",
       "30119              COMPUTER NETWORK/INFORMATION SERVICES        377.701890  \n",
       "37258  CHEMICALS AND ALLIED PRODUCTS NOT ELSEWHERE CL...        300.130904  \n",
       "9                                             OTHER FEES        272.210571  \n",
       "46042                         TELECOMMUNICATION SERVICES        198.051727  \n",
       "19494  DIRCT MARKETING/DIRCT MARKETERS--NOT ELSEWHERE...        144.524238  \n",
       "...                                                  ...               ...  \n",
       "94                                            OTHER FEES          0.000024  \n",
       "108                                           OTHER FEES          0.000021  \n",
       "93                                            OTHER FEES          0.000020  \n",
       "47766                               ADVERTISING SERVICES          0.000020  \n",
       "5                                             OTHER FEES          0.000012  \n",
       "\n",
       "[68867 rows x 11 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mergeddata.sort_values(by=\"coeffofdeviation\",ascending=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    68867.000000\n",
       "mean         1.066947\n",
       "std          3.466214\n",
       "min          0.000012\n",
       "25%          0.205481\n",
       "50%          0.489653\n",
       "75%          1.056120\n",
       "max        377.701890\n",
       "Name: coeffofdeviation, dtype: float64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mergeddata['coeffofdeviation'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Frequency')"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mergeddata['coeffofdeviation'].plot.hist(title='Distribution of coefficient of deviation amongst users', colormap='jet')\n",
    "plt.xlabel('Coeff of Deviation')\n",
    "plt.ylabel('Frequency')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.992530232697376"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## percentile check\n",
    "mergeddata['coeffofdeviation'].quantile(0.99)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Percentile check has been used to get an idea of threshold value above which the transaction can be given extra attention. So coeff values above 9 need more sanity checks than the others. For this percentile check, I check the values which are in 1 percent of max coeff of deviation values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#only use complete cases\n",
    "mergeddata=mergeddata.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_final=mergeddata.iloc[:,[0,1,2,3,4,5,6,7,10]]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FullName</th>\n",
       "      <th>Merchant Category Code (MCC)</th>\n",
       "      <th>MeanAmount</th>\n",
       "      <th>monthlymeanbycat</th>\n",
       "      <th>meanfracmonth</th>\n",
       "      <th>meanfracmerchant</th>\n",
       "      <th>meanamountdiff</th>\n",
       "      <th>meantimediff</th>\n",
       "      <th>coeffofdeviation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2 24100</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>313.264444</td>\n",
       "      <td>625.715556</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>-2.111250</td>\n",
       "      <td>30.250000</td>\n",
       "      <td>0.093342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>4 42000</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>133.998125</td>\n",
       "      <td>252.165625</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>0.062500</td>\n",
       "      <td>-0.060667</td>\n",
       "      <td>22.333333</td>\n",
       "      <td>0.039927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4 48000</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>137.639091</td>\n",
       "      <td>229.230000</td>\n",
       "      <td>0.636364</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>21.300000</td>\n",
       "      <td>0.041012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>5 53100</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>-0.140000</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>0.000119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>6 60500</td>\n",
       "      <td>OTHER FEES</td>\n",
       "      <td>125.050000</td>\n",
       "      <td>250.100000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>-249.900000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>0.037261</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  FullName Merchant Category Code (MCC)  MeanAmount  monthlymeanbycat  \\\n",
       "1  2 24100                   OTHER FEES  313.264444        625.715556   \n",
       "2  4 42000                   OTHER FEES  133.998125        252.165625   \n",
       "4  4 48000                   OTHER FEES  137.639091        229.230000   \n",
       "6  5 53100                   OTHER FEES    0.400000          0.400000   \n",
       "7  6 60500                   OTHER FEES  125.050000        250.100000   \n",
       "\n",
       "   meanfracmonth  meanfracmerchant  meanamountdiff  meantimediff  \\\n",
       "1       0.666667          0.111111       -2.111250     30.250000   \n",
       "2       0.625000          0.062500       -0.060667     22.333333   \n",
       "4       0.636364          0.090909        0.000000     21.300000   \n",
       "6       1.000000          0.333333       -0.140000     75.000000   \n",
       "7       0.500000          0.500000     -249.900000     18.000000   \n",
       "\n",
       "   coeffofdeviation  \n",
       "1          0.093342  \n",
       "2          0.039927  \n",
       "4          0.041012  \n",
       "6          0.000119  \n",
       "7          0.037261  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_final.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### To standardize the dataset, I am going with Standard Scaler transformation. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#predictors and target variable\n",
    "X=data_final.iloc[:,[2,3,4,5,6,7,8]]\n",
    "y=data_final.iloc[:,0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### For better insights, I decide to label my target variable to be \"FullName\" and the predictors are the features I created. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-0.045981</td>\n",
       "      <td>-0.161435</td>\n",
       "      <td>1.946021</td>\n",
       "      <td>-1.228590</td>\n",
       "      <td>-0.016463</td>\n",
       "      <td>1.484054</td>\n",
       "      <td>-0.279695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>-0.090688</td>\n",
       "      <td>-0.168095</td>\n",
       "      <td>1.775611</td>\n",
       "      <td>-1.356174</td>\n",
       "      <td>-0.015837</td>\n",
       "      <td>0.989155</td>\n",
       "      <td>-0.295002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-0.089780</td>\n",
       "      <td>-0.168504</td>\n",
       "      <td>1.822086</td>\n",
       "      <td>-1.281612</td>\n",
       "      <td>-0.015818</td>\n",
       "      <td>0.924557</td>\n",
       "      <td>-0.294691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-0.124005</td>\n",
       "      <td>-0.172583</td>\n",
       "      <td>3.309301</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>-0.015861</td>\n",
       "      <td>4.281535</td>\n",
       "      <td>-0.306409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>-0.092919</td>\n",
       "      <td>-0.168131</td>\n",
       "      <td>1.264381</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>-0.092145</td>\n",
       "      <td>0.718263</td>\n",
       "      <td>-0.295766</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3         4         5         6\n",
       "0 -0.045981 -0.161435  1.946021 -1.228590 -0.016463  1.484054 -0.279695\n",
       "1 -0.090688 -0.168095  1.775611 -1.356174 -0.015837  0.989155 -0.295002\n",
       "2 -0.089780 -0.168504  1.822086 -1.281612 -0.015818  0.924557 -0.294691\n",
       "3 -0.124005 -0.172583  3.309301 -0.645352 -0.015861  4.281535 -0.306409\n",
       "4 -0.092919 -0.168131  1.264381 -0.207923 -0.092145  0.718263 -0.295766"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#standardize data using standard scaler transformation\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "X = StandardScaler().fit_transform(X)\n",
    "X = pd.DataFrame(X)\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Our dataset is ready for unsupervised learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Train Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyod.models.knn import KNN\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.33, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(45216, 7)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>34506</td>\n",
       "      <td>0.142525</td>\n",
       "      <td>0.035860</td>\n",
       "      <td>-0.389726</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>0.053728</td>\n",
       "      <td>-0.386143</td>\n",
       "      <td>0.236357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22371</td>\n",
       "      <td>-0.004094</td>\n",
       "      <td>-0.051003</td>\n",
       "      <td>-0.473748</td>\n",
       "      <td>-1.145271</td>\n",
       "      <td>-0.001091</td>\n",
       "      <td>-0.209021</td>\n",
       "      <td>0.012822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>51650</td>\n",
       "      <td>-0.112080</td>\n",
       "      <td>-0.100489</td>\n",
       "      <td>-0.731774</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>-0.076348</td>\n",
       "      <td>-0.156927</td>\n",
       "      <td>-0.279549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40862</td>\n",
       "      <td>-0.108643</td>\n",
       "      <td>-0.153727</td>\n",
       "      <td>-0.540874</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>-0.020904</td>\n",
       "      <td>0.655749</td>\n",
       "      <td>-0.292530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>62092</td>\n",
       "      <td>-0.097254</td>\n",
       "      <td>-0.108142</td>\n",
       "      <td>-0.651362</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>-0.038427</td>\n",
       "      <td>-0.198603</td>\n",
       "      <td>-0.239815</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              0         1         2         3         4         5         6\n",
       "34506  0.142525  0.035860 -0.389726 -0.645352  0.053728 -0.386143  0.236357\n",
       "22371 -0.004094 -0.051003 -0.473748 -1.145271 -0.001091 -0.209021  0.012822\n",
       "51650 -0.112080 -0.100489 -0.731774  1.104362 -0.076348 -0.156927 -0.279549\n",
       "40862 -0.108643 -0.153727 -0.540874  1.104362 -0.020904  0.655749 -0.292530\n",
       "62092 -0.097254 -0.108142 -0.651362 -0.645352 -0.038427 -0.198603 -0.239815"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>22509</td>\n",
       "      <td>-0.090945</td>\n",
       "      <td>0.033055</td>\n",
       "      <td>-0.745771</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>-0.078603</td>\n",
       "      <td>-0.386143</td>\n",
       "      <td>-0.218227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16864</td>\n",
       "      <td>0.160945</td>\n",
       "      <td>-0.081801</td>\n",
       "      <td>-0.015319</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>0.023338</td>\n",
       "      <td>-0.281954</td>\n",
       "      <td>0.496246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>53523</td>\n",
       "      <td>-0.056148</td>\n",
       "      <td>0.631312</td>\n",
       "      <td>-0.755823</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.061181</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>0.203356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>902</td>\n",
       "      <td>-0.024350</td>\n",
       "      <td>-0.119602</td>\n",
       "      <td>-0.230102</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>-0.333946</td>\n",
       "      <td>0.093127</td>\n",
       "      <td>0.086501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>44342</td>\n",
       "      <td>0.327287</td>\n",
       "      <td>0.181109</td>\n",
       "      <td>-0.407402</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>0.268413</td>\n",
       "      <td>-0.344467</td>\n",
       "      <td>0.547076</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              0         1         2         3         4         5         6\n",
       "22509 -0.090945  0.033055 -0.745771 -0.645352 -0.078603 -0.386143 -0.218227\n",
       "16864  0.160945 -0.081801 -0.015319 -0.645352  0.023338 -0.281954  0.496246\n",
       "53523 -0.056148  0.631312 -0.755823 -0.207923  0.061181 -0.406981  0.203356\n",
       "902   -0.024350 -0.119602 -0.230102  1.104362 -0.333946  0.093127  0.086501\n",
       "44342  0.327287  0.181109 -0.407402  1.104362  0.268413 -0.344467  0.547076"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot in a 2-D space just to visualize it.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.129192</td>\n",
       "      <td>-1.779339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.015632</td>\n",
       "      <td>-1.324985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.018701</td>\n",
       "      <td>-1.342600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.514837</td>\n",
       "      <td>-4.596954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>-0.021124</td>\n",
       "      <td>-1.222888</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        PC1       PC2\n",
       "0  0.129192 -1.779339\n",
       "1  0.015632 -1.324985\n",
       "2  0.018701 -1.342600\n",
       "3  0.514837 -4.596954\n",
       "4 -0.021124 -1.222888"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "pca = PCA(2)\n",
    "x_pca = pca.fit_transform(X)\n",
    "x_pca = pd.DataFrame(x_pca)\n",
    "x_pca.columns=['PC1','PC2']\n",
    "x_pca.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x123cbfa58>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_pca.plot(kind='scatter', x='PC1', y='PC2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>6.748700e+04</td>\n",
       "      <td>6.748700e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>7.610174e-17</td>\n",
       "      <td>-2.285526e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>1.349700e+00</td>\n",
       "      <td>1.272145e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>-4.658976e-01</td>\n",
       "      <td>-1.578433e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>-2.896257e-01</td>\n",
       "      <td>-2.882231e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>-1.701191e-01</td>\n",
       "      <td>2.731300e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>5.490026e-02</td>\n",
       "      <td>7.564270e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>2.620973e+02</td>\n",
       "      <td>3.939743e+01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                PC1           PC2\n",
       "count  6.748700e+04  6.748700e+04\n",
       "mean   7.610174e-17 -2.285526e-17\n",
       "std    1.349700e+00  1.272145e+00\n",
       "min   -4.658976e-01 -1.578433e+01\n",
       "25%   -2.896257e-01 -2.882231e-01\n",
       "50%   -1.701191e-01  2.731300e-01\n",
       "75%    5.490026e-02  7.564270e-01\n",
       "max    2.620973e+02  3.939743e+01"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_pca.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN: An Unsupervised technique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNN(algorithm='auto', contamination=0.1, leaf_size=30, method='largest',\n",
       "  metric='minkowski', metric_params=None, n_jobs=1, n_neighbors=3, p=2,\n",
       "  radius=1.0)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train kNN detector\n",
    "# Use 3-nearest neighbors\n",
    "clf_name = 'KNN'\n",
    "clf = KNN(n_neighbors=3, method='largest')\n",
    "clf.fit(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Initially a 3 neighbor solution is analyzed with the above parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.09566509, 0.02898091, 0.07671728, 0.04813948, 0.05035039,\n",
       "       0.07211354, 0.07281458, 0.13926563, 0.15538171])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_scores = clf.decision_scores_\n",
    "y_train_scores[1:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    20014\n",
       "1     2257\n",
       "dtype: int64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the prediction on the test data\n",
    "y_test_pred = clf.predict(X_test)  # outlier labels (0 or 1)\n",
    "y_test_pred = pd.Series(y_test_pred)\n",
    "y_test_pred.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The first attempt at modeling gives 2257 outlier labels which account to 10% approx "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.10134255309595439"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2257/22271"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.043815\n",
       "1    0.137340\n",
       "2    0.183414\n",
       "3    0.209238\n",
       "4    0.197013\n",
       "dtype: float64"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# clf.decision_function: Predict raw anomaly score of X using the fitted detector.\n",
    "y_test_scores = clf.decision_function(X_test)  # outlier scores\n",
    "y_test_scores = pd.Series(y_test_scores)\n",
    "y_test_scores.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Decision function is used as a fitted detector to predict raw anomaly scores. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    22271.000000\n",
       "mean         0.153784\n",
       "std          2.070651\n",
       "min          0.004482\n",
       "25%          0.052078\n",
       "50%          0.081175\n",
       "75%          0.134970\n",
       "max        287.114091\n",
       "dtype: float64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_scores.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.figure(figsize=(10,8))\n",
    "plt.hist(y_test_scores,bins='auto')  # arguments are passed to np.histogram\n",
    "plt.title(\"Histogram with 'auto' bins\")\n",
    "plt.xlim(0,0.5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Based on this histogram, I chose 0.4 as the threshold value for identifying anomalies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test=X_test.reset_index()\n",
    "X_test_cluster = X_test.copy()\n",
    "X_test_cluster['distance'] = y_test_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        0.043815\n",
       "1        0.137340\n",
       "2        0.183414\n",
       "3        0.209238\n",
       "4        0.197013\n",
       "           ...   \n",
       "22266    0.040649\n",
       "22267    0.091311\n",
       "22268    0.394564\n",
       "22269    0.135539\n",
       "22270    0.069590\n",
       "Length: 22271, dtype: float64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>22509</td>\n",
       "      <td>-0.090945</td>\n",
       "      <td>0.033055</td>\n",
       "      <td>-0.745771</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>-0.078603</td>\n",
       "      <td>-0.386143</td>\n",
       "      <td>-0.218227</td>\n",
       "      <td>0.043815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>16864</td>\n",
       "      <td>0.160945</td>\n",
       "      <td>-0.081801</td>\n",
       "      <td>-0.015319</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>0.023338</td>\n",
       "      <td>-0.281954</td>\n",
       "      <td>0.496246</td>\n",
       "      <td>0.137340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>53523</td>\n",
       "      <td>-0.056148</td>\n",
       "      <td>0.631312</td>\n",
       "      <td>-0.755823</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.061181</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>0.203356</td>\n",
       "      <td>0.183414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>902</td>\n",
       "      <td>-0.024350</td>\n",
       "      <td>-0.119602</td>\n",
       "      <td>-0.230102</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>-0.333946</td>\n",
       "      <td>0.093127</td>\n",
       "      <td>0.086501</td>\n",
       "      <td>0.209238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>44342</td>\n",
       "      <td>0.327287</td>\n",
       "      <td>0.181109</td>\n",
       "      <td>-0.407402</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>0.268413</td>\n",
       "      <td>-0.344467</td>\n",
       "      <td>0.547076</td>\n",
       "      <td>0.197013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22266</td>\n",
       "      <td>64007</td>\n",
       "      <td>-0.024350</td>\n",
       "      <td>0.149516</td>\n",
       "      <td>-0.689989</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>-0.070698</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>-0.206234</td>\n",
       "      <td>0.040649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22267</td>\n",
       "      <td>47061</td>\n",
       "      <td>-0.026622</td>\n",
       "      <td>-0.131474</td>\n",
       "      <td>-0.086444</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.048761</td>\n",
       "      <td>0.280668</td>\n",
       "      <td>-0.172992</td>\n",
       "      <td>0.091311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22268</td>\n",
       "      <td>26676</td>\n",
       "      <td>0.333209</td>\n",
       "      <td>0.112942</td>\n",
       "      <td>-0.047254</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>-0.256300</td>\n",
       "      <td>-0.261116</td>\n",
       "      <td>-0.199849</td>\n",
       "      <td>0.394564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22269</td>\n",
       "      <td>37537</td>\n",
       "      <td>0.008569</td>\n",
       "      <td>-0.163106</td>\n",
       "      <td>3.309301</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>0.126994</td>\n",
       "      <td>0.155641</td>\n",
       "      <td>0.067068</td>\n",
       "      <td>0.135539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22270</td>\n",
       "      <td>25867</td>\n",
       "      <td>-0.065952</td>\n",
       "      <td>-0.154099</td>\n",
       "      <td>0.162624</td>\n",
       "      <td>-0.864066</td>\n",
       "      <td>-0.014093</td>\n",
       "      <td>-0.261116</td>\n",
       "      <td>-0.251227</td>\n",
       "      <td>0.069590</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>22271 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       index         0         1         2         3         4         5  \\\n",
       "0      22509 -0.090945  0.033055 -0.745771 -0.645352 -0.078603 -0.386143   \n",
       "1      16864  0.160945 -0.081801 -0.015319 -0.645352  0.023338 -0.281954   \n",
       "2      53523 -0.056148  0.631312 -0.755823 -0.207923  0.061181 -0.406981   \n",
       "3        902 -0.024350 -0.119602 -0.230102  1.104362 -0.333946  0.093127   \n",
       "4      44342  0.327287  0.181109 -0.407402  1.104362  0.268413 -0.344467   \n",
       "...      ...       ...       ...       ...       ...       ...       ...   \n",
       "22266  64007 -0.024350  0.149516 -0.689989  1.104362 -0.070698 -0.406981   \n",
       "22267  47061 -0.026622 -0.131474 -0.086444 -0.207923  0.048761  0.280668   \n",
       "22268  26676  0.333209  0.112942 -0.047254 -0.645352 -0.256300 -0.261116   \n",
       "22269  37537  0.008569 -0.163106  3.309301  1.104362  0.126994  0.155641   \n",
       "22270  25867 -0.065952 -0.154099  0.162624 -0.864066 -0.014093 -0.261116   \n",
       "\n",
       "              6  distance  \n",
       "0     -0.218227  0.043815  \n",
       "1      0.496246  0.137340  \n",
       "2      0.203356  0.183414  \n",
       "3      0.086501  0.209238  \n",
       "4      0.547076  0.197013  \n",
       "...         ...       ...  \n",
       "22266 -0.206234  0.040649  \n",
       "22267 -0.172992  0.091311  \n",
       "22268 -0.199849  0.394564  \n",
       "22269  0.067068  0.135539  \n",
       "22270 -0.251227  0.069590  \n",
       "\n",
       "[22271 rows x 9 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test_cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    21376\n",
       "1      895\n",
       "Name: cluster, dtype: int64"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test_cluster['cluster'] = np.where(X_test_cluster['distance']<0.4, 0, 1)\n",
    "X_test_cluster['cluster'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.04018678999595887"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "895/22271"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4 percent of all entries are identified by our fitted detector as anomalies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cluster</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>33772.602217</td>\n",
       "      <td>-0.035905</td>\n",
       "      <td>-0.050768</td>\n",
       "      <td>-0.037766</td>\n",
       "      <td>-0.000517</td>\n",
       "      <td>-0.005038</td>\n",
       "      <td>-0.058923</td>\n",
       "      <td>-0.078644</td>\n",
       "      <td>0.099439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>36452.867039</td>\n",
       "      <td>0.998942</td>\n",
       "      <td>1.143385</td>\n",
       "      <td>0.906227</td>\n",
       "      <td>0.098208</td>\n",
       "      <td>-0.141444</td>\n",
       "      <td>1.324553</td>\n",
       "      <td>1.750588</td>\n",
       "      <td>1.451746</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                index         0         1         2         3         4  \\\n",
       "cluster                                                                   \n",
       "0        33772.602217 -0.035905 -0.050768 -0.037766 -0.000517 -0.005038   \n",
       "1        36452.867039  0.998942  1.143385  0.906227  0.098208 -0.141444   \n",
       "\n",
       "                5         6  distance  \n",
       "cluster                                \n",
       "0       -0.058923 -0.078644  0.099439  \n",
       "1        1.324553  1.750588  1.451746  "
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test_cluster.groupby('cluster').mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Cluster 1 which is the anomalous cluster shows relatively much higher aggregation values for all the features and even for the distance calculated. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyod.models.combination import aom, moa, average, maximization\n",
    "from pyod.utils.utility import standardizer\n",
    "from pyod.utils.data import generate_data\n",
    "from pyod.utils.data import evaluate_print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_clf = 10  # number of base detectors\n",
    "k_list = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_scores = np.zeros([X_train.shape[0], n_clf])\n",
    "test_scores = np.zeros([X_test.shape[0], n_clf])\n",
    "train_scores = pd.DataFrame(train_scores)\n",
    "test_scores = pd.DataFrame(test_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(45216, 10)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_scores.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     0    1    2    3    4    5    6    7    8    9\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n",
       "1  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n",
       "2  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n",
       "3  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n",
       "4  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_scores.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>22509</td>\n",
       "      <td>-0.090945</td>\n",
       "      <td>0.033055</td>\n",
       "      <td>-0.745771</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>-0.078603</td>\n",
       "      <td>-0.386143</td>\n",
       "      <td>-0.218227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>16864</td>\n",
       "      <td>0.160945</td>\n",
       "      <td>-0.081801</td>\n",
       "      <td>-0.015319</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>0.023338</td>\n",
       "      <td>-0.281954</td>\n",
       "      <td>0.496246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>53523</td>\n",
       "      <td>-0.056148</td>\n",
       "      <td>0.631312</td>\n",
       "      <td>-0.755823</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.061181</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>0.203356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>902</td>\n",
       "      <td>-0.024350</td>\n",
       "      <td>-0.119602</td>\n",
       "      <td>-0.230102</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>-0.333946</td>\n",
       "      <td>0.093127</td>\n",
       "      <td>0.086501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>44342</td>\n",
       "      <td>0.327287</td>\n",
       "      <td>0.181109</td>\n",
       "      <td>-0.407402</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>0.268413</td>\n",
       "      <td>-0.344467</td>\n",
       "      <td>0.547076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22266</td>\n",
       "      <td>64007</td>\n",
       "      <td>-0.024350</td>\n",
       "      <td>0.149516</td>\n",
       "      <td>-0.689989</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>-0.070698</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>-0.206234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22267</td>\n",
       "      <td>47061</td>\n",
       "      <td>-0.026622</td>\n",
       "      <td>-0.131474</td>\n",
       "      <td>-0.086444</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.048761</td>\n",
       "      <td>0.280668</td>\n",
       "      <td>-0.172992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22268</td>\n",
       "      <td>26676</td>\n",
       "      <td>0.333209</td>\n",
       "      <td>0.112942</td>\n",
       "      <td>-0.047254</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>-0.256300</td>\n",
       "      <td>-0.261116</td>\n",
       "      <td>-0.199849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22269</td>\n",
       "      <td>37537</td>\n",
       "      <td>0.008569</td>\n",
       "      <td>-0.163106</td>\n",
       "      <td>3.309301</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>0.126994</td>\n",
       "      <td>0.155641</td>\n",
       "      <td>0.067068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22270</td>\n",
       "      <td>25867</td>\n",
       "      <td>-0.065952</td>\n",
       "      <td>-0.154099</td>\n",
       "      <td>0.162624</td>\n",
       "      <td>-0.864066</td>\n",
       "      <td>-0.014093</td>\n",
       "      <td>-0.261116</td>\n",
       "      <td>-0.251227</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>22271 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       index         0         1         2         3         4         5  \\\n",
       "0      22509 -0.090945  0.033055 -0.745771 -0.645352 -0.078603 -0.386143   \n",
       "1      16864  0.160945 -0.081801 -0.015319 -0.645352  0.023338 -0.281954   \n",
       "2      53523 -0.056148  0.631312 -0.755823 -0.207923  0.061181 -0.406981   \n",
       "3        902 -0.024350 -0.119602 -0.230102  1.104362 -0.333946  0.093127   \n",
       "4      44342  0.327287  0.181109 -0.407402  1.104362  0.268413 -0.344467   \n",
       "...      ...       ...       ...       ...       ...       ...       ...   \n",
       "22266  64007 -0.024350  0.149516 -0.689989  1.104362 -0.070698 -0.406981   \n",
       "22267  47061 -0.026622 -0.131474 -0.086444 -0.207923  0.048761  0.280668   \n",
       "22268  26676  0.333209  0.112942 -0.047254 -0.645352 -0.256300 -0.261116   \n",
       "22269  37537  0.008569 -0.163106  3.309301  1.104362  0.126994  0.155641   \n",
       "22270  25867 -0.065952 -0.154099  0.162624 -0.864066 -0.014093 -0.261116   \n",
       "\n",
       "              6  \n",
       "0     -0.218227  \n",
       "1      0.496246  \n",
       "2      0.203356  \n",
       "3      0.086501  \n",
       "4      0.547076  \n",
       "...         ...  \n",
       "22266 -0.206234  \n",
       "22267 -0.172992  \n",
       "22268 -0.199849  \n",
       "22269  0.067068  \n",
       "22270 -0.251227  \n",
       "\n",
       "[22271 rows x 8 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test=X_test.iloc[:,[1,2,3,4,5,6,7]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(n_clf):\n",
    "        k = k_list[i]\n",
    "\n",
    "        clf = KNN(n_neighbors=k, method='largest')\n",
    "        clf.fit(X_train)\n",
    "\n",
    "        train_scores.loc[:, i] = clf.decision_scores_\n",
    "        test_scores.loc[:, i] = clf.decision_function(X_test) # Predict raw anomaly score of X using the fitted detector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(45216, 10)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_scores.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.103603</td>\n",
       "      <td>0.112051</td>\n",
       "      <td>0.122100</td>\n",
       "      <td>0.126628</td>\n",
       "      <td>0.131399</td>\n",
       "      <td>0.137217</td>\n",
       "      <td>0.139377</td>\n",
       "      <td>0.147438</td>\n",
       "      <td>0.150959</td>\n",
       "      <td>0.153244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.036001</td>\n",
       "      <td>0.047893</td>\n",
       "      <td>0.053661</td>\n",
       "      <td>0.058315</td>\n",
       "      <td>0.062120</td>\n",
       "      <td>0.064718</td>\n",
       "      <td>0.065810</td>\n",
       "      <td>0.067731</td>\n",
       "      <td>0.069093</td>\n",
       "      <td>0.070379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.082895</td>\n",
       "      <td>0.094386</td>\n",
       "      <td>0.116375</td>\n",
       "      <td>0.133779</td>\n",
       "      <td>0.140712</td>\n",
       "      <td>0.144580</td>\n",
       "      <td>0.154505</td>\n",
       "      <td>0.158485</td>\n",
       "      <td>0.166269</td>\n",
       "      <td>0.170491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.053211</td>\n",
       "      <td>0.061967</td>\n",
       "      <td>0.068604</td>\n",
       "      <td>0.071701</td>\n",
       "      <td>0.075961</td>\n",
       "      <td>0.078349</td>\n",
       "      <td>0.080969</td>\n",
       "      <td>0.083200</td>\n",
       "      <td>0.088943</td>\n",
       "      <td>0.090712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0.059641</td>\n",
       "      <td>0.069017</td>\n",
       "      <td>0.081003</td>\n",
       "      <td>0.091420</td>\n",
       "      <td>0.096263</td>\n",
       "      <td>0.099953</td>\n",
       "      <td>0.104407</td>\n",
       "      <td>0.107908</td>\n",
       "      <td>0.115516</td>\n",
       "      <td>0.118324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0.078536</td>\n",
       "      <td>0.087624</td>\n",
       "      <td>0.094097</td>\n",
       "      <td>0.096214</td>\n",
       "      <td>0.099889</td>\n",
       "      <td>0.102949</td>\n",
       "      <td>0.104906</td>\n",
       "      <td>0.108421</td>\n",
       "      <td>0.111073</td>\n",
       "      <td>0.112971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>0.083188</td>\n",
       "      <td>0.094193</td>\n",
       "      <td>0.098021</td>\n",
       "      <td>0.101257</td>\n",
       "      <td>0.105947</td>\n",
       "      <td>0.107724</td>\n",
       "      <td>0.111918</td>\n",
       "      <td>0.113920</td>\n",
       "      <td>0.115763</td>\n",
       "      <td>0.119977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>0.145328</td>\n",
       "      <td>0.164877</td>\n",
       "      <td>0.182464</td>\n",
       "      <td>0.187772</td>\n",
       "      <td>0.194965</td>\n",
       "      <td>0.199268</td>\n",
       "      <td>0.202057</td>\n",
       "      <td>0.203166</td>\n",
       "      <td>0.206908</td>\n",
       "      <td>0.210817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>0.182746</td>\n",
       "      <td>0.214499</td>\n",
       "      <td>0.244375</td>\n",
       "      <td>0.274273</td>\n",
       "      <td>0.284233</td>\n",
       "      <td>0.294450</td>\n",
       "      <td>0.299522</td>\n",
       "      <td>0.307919</td>\n",
       "      <td>0.322237</td>\n",
       "      <td>0.326391</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3         4         5         6  \\\n",
       "1  0.103603  0.112051  0.122100  0.126628  0.131399  0.137217  0.139377   \n",
       "2  0.036001  0.047893  0.053661  0.058315  0.062120  0.064718  0.065810   \n",
       "3  0.082895  0.094386  0.116375  0.133779  0.140712  0.144580  0.154505   \n",
       "4  0.053211  0.061967  0.068604  0.071701  0.075961  0.078349  0.080969   \n",
       "5  0.059641  0.069017  0.081003  0.091420  0.096263  0.099953  0.104407   \n",
       "6  0.078536  0.087624  0.094097  0.096214  0.099889  0.102949  0.104906   \n",
       "7  0.083188  0.094193  0.098021  0.101257  0.105947  0.107724  0.111918   \n",
       "8  0.145328  0.164877  0.182464  0.187772  0.194965  0.199268  0.202057   \n",
       "9  0.182746  0.214499  0.244375  0.274273  0.284233  0.294450  0.299522   \n",
       "\n",
       "          7         8         9  \n",
       "1  0.147438  0.150959  0.153244  \n",
       "2  0.067731  0.069093  0.070379  \n",
       "3  0.158485  0.166269  0.170491  \n",
       "4  0.083200  0.088943  0.090712  \n",
       "5  0.107908  0.115516  0.118324  \n",
       "6  0.108421  0.111073  0.112971  \n",
       "7  0.113920  0.115763  0.119977  \n",
       "8  0.203166  0.206908  0.210817  \n",
       "9  0.307919  0.322237  0.326391  "
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_scores[1:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.26101572, 0.31941364, 0.28578509, 0.27735793, 0.13585635,\n",
       "       0.07843569, 0.13682214, 0.11752766, 0.07999412])"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Combination by average\n",
    "y_by_average = average(test_scores)\n",
    "y_by_average[1:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Combination by average\n",
    "y_by_average = average(test_scores)\n",
    "             \n",
    "import matplotlib.pyplot as plt\n",
    "plt.hist(y_by_average, bins='auto')  # arguments are passed to np.histogram\n",
    "plt.title(\"Combination by average\")\n",
    "plt.xlim(0,1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    21101\n",
       "1     1170\n",
       "Name: y_by_average_cluster, dtype: int64"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We don't want to overwrite X_test, so we use .copy() to make a new copy of X_test. \n",
    "# If you use df_test = X_test, you reference to the same data.\n",
    "df_test = X_test.copy()\n",
    "df_test['y_by_average_score'] = y_by_average\n",
    "df_test['y_by_average_cluster'] = np.where(df_test['y_by_average_score']<0.6, 0, 1)\n",
    "df_test['y_by_average_cluster'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 0.6 as threshold value based on histogram which leaves us with 1170 cases only to explore further"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>y_by_average_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y_by_average_cluster</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-0.038043</td>\n",
       "      <td>-0.055509</td>\n",
       "      <td>-0.056577</td>\n",
       "      <td>-0.008671</td>\n",
       "      <td>-0.007827</td>\n",
       "      <td>-0.097016</td>\n",
       "      <td>-0.085658</td>\n",
       "      <td>0.164475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.794256</td>\n",
       "      <td>0.948219</td>\n",
       "      <td>1.023599</td>\n",
       "      <td>0.222060</td>\n",
       "      <td>-0.059094</td>\n",
       "      <td>1.686387</td>\n",
       "      <td>1.447139</td>\n",
       "      <td>1.904677</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             0         1         2         3         4  \\\n",
       "y_by_average_cluster                                                     \n",
       "0                    -0.038043 -0.055509 -0.056577 -0.008671 -0.007827   \n",
       "1                     0.794256  0.948219  1.023599  0.222060 -0.059094   \n",
       "\n",
       "                             5         6  y_by_average_score  \n",
       "y_by_average_cluster                                          \n",
       "0                    -0.097016 -0.085658            0.164475  \n",
       "1                     1.686387  1.447139            1.904677  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.groupby('y_by_average_cluster').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Combination by max\n",
    "y_by_maximization = maximization(test_scores)\n",
    "             \n",
    "import matplotlib.pyplot as plt\n",
    "plt.hist(y_by_maximization, bins='auto')  # arguments are passed to np.histogram\n",
    "plt.title(\"Combination by max\")\n",
    "plt.xlim(0,1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    21248\n",
       "1     1023\n",
       "Name: y_by_maximization_cluster, dtype: int64"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test['y_by_maximization_score'] = y_by_maximization\n",
    "df_test['y_by_maximization_cluster'] = np.where(df_test['y_by_maximization_score']<0.8, 0, 1)\n",
    "df_test['y_by_maximization_cluster'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 0.8 as threshold value based on histogram which leaves us with 1023 cases only to explore further"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>y_by_average_score</th>\n",
       "      <th>y_by_average_cluster</th>\n",
       "      <th>y_by_maximization_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y_by_maximization_cluster</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-0.035504</td>\n",
       "      <td>-0.055583</td>\n",
       "      <td>-0.049455</td>\n",
       "      <td>-0.008332</td>\n",
       "      <td>-0.006683</td>\n",
       "      <td>-0.09568</td>\n",
       "      <td>-0.079083</td>\n",
       "      <td>0.167868</td>\n",
       "      <td>0.008330</td>\n",
       "      <td>0.202744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.861123</td>\n",
       "      <td>1.093984</td>\n",
       "      <td>1.030889</td>\n",
       "      <td>0.248177</td>\n",
       "      <td>-0.090222</td>\n",
       "      <td>1.91490</td>\n",
       "      <td>1.530826</td>\n",
       "      <td>2.084268</td>\n",
       "      <td>0.970674</td>\n",
       "      <td>2.565708</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  0         1         2         3         4  \\\n",
       "y_by_maximization_cluster                                                     \n",
       "0                         -0.035504 -0.055583 -0.049455 -0.008332 -0.006683   \n",
       "1                          0.861123  1.093984  1.030889  0.248177 -0.090222   \n",
       "\n",
       "                                 5         6  y_by_average_score  \\\n",
       "y_by_maximization_cluster                                          \n",
       "0                         -0.09568 -0.079083            0.167868   \n",
       "1                          1.91490  1.530826            2.084268   \n",
       "\n",
       "                           y_by_average_cluster  y_by_maximization_score  \n",
       "y_by_maximization_cluster                                                 \n",
       "0                                      0.008330                 0.202744  \n",
       "1                                      0.970674                 2.565708  "
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.groupby('y_by_maximization_cluster').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Combination by aom\n",
    "y_by_aom = aom(test_scores, n_buckets=5)\n",
    "             \n",
    "import matplotlib.pyplot as plt\n",
    "plt.hist(y_by_aom, bins='auto')  # arguments are passed to np.histogram\n",
    "plt.title(\"Average of Maximum\")\n",
    "plt.xlim(0,1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    21456\n",
       "1      815\n",
       "Name: y_by_aom_cluster, dtype: int64"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test['y_by_aom_score'] = y_by_aom\n",
    "df_test['y_by_aom_cluster'] = np.where(df_test['y_by_aom_score']<0.8, 0, 1)\n",
    "df_test['y_by_aom_cluster'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 0.8 as threshold value based on histogram which leaves us with 815 cases only to explore further"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>y_by_average_score</th>\n",
       "      <th>y_by_average_cluster</th>\n",
       "      <th>y_by_maximization_score</th>\n",
       "      <th>y_by_maximization_cluster</th>\n",
       "      <th>y_by_aom_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y_by_aom_cluster</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-0.033184</td>\n",
       "      <td>-0.053365</td>\n",
       "      <td>-0.038504</td>\n",
       "      <td>-0.004698</td>\n",
       "      <td>-0.004475</td>\n",
       "      <td>-0.080496</td>\n",
       "      <td>-0.072778</td>\n",
       "      <td>0.172703</td>\n",
       "      <td>0.016545</td>\n",
       "      <td>0.209102</td>\n",
       "      <td>0.009694</td>\n",
       "      <td>0.187453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1.028884</td>\n",
       "      <td>1.328962</td>\n",
       "      <td>1.018302</td>\n",
       "      <td>0.217963</td>\n",
       "      <td>-0.169651</td>\n",
       "      <td>2.028303</td>\n",
       "      <td>1.775707</td>\n",
       "      <td>2.446057</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.001406</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.659310</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         0         1         2         3         4         5  \\\n",
       "y_by_aom_cluster                                                               \n",
       "0                -0.033184 -0.053365 -0.038504 -0.004698 -0.004475 -0.080496   \n",
       "1                 1.028884  1.328962  1.018302  0.217963 -0.169651  2.028303   \n",
       "\n",
       "                         6  y_by_average_score  y_by_average_cluster  \\\n",
       "y_by_aom_cluster                                                       \n",
       "0                -0.072778            0.172703              0.016545   \n",
       "1                 1.775707            2.446057              1.000000   \n",
       "\n",
       "                  y_by_maximization_score  y_by_maximization_cluster  \\\n",
       "y_by_aom_cluster                                                       \n",
       "0                                0.209102                   0.009694   \n",
       "1                                3.001406                   1.000000   \n",
       "\n",
       "                  y_by_aom_score  \n",
       "y_by_aom_cluster                  \n",
       "0                       0.187453  \n",
       "1                       2.659310  "
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.groupby('y_by_aom_cluster').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>y_by_average_score</th>\n",
       "      <th>y_by_average_cluster</th>\n",
       "      <th>y_by_maximization_score</th>\n",
       "      <th>y_by_maximization_cluster</th>\n",
       "      <th>y_by_aom_score</th>\n",
       "      <th>y_by_aom_cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-0.090945</td>\n",
       "      <td>0.033055</td>\n",
       "      <td>-0.745771</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>-0.078603</td>\n",
       "      <td>-0.386143</td>\n",
       "      <td>-0.218227</td>\n",
       "      <td>0.074366</td>\n",
       "      <td>0</td>\n",
       "      <td>0.087358</td>\n",
       "      <td>0</td>\n",
       "      <td>0.080360</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.160945</td>\n",
       "      <td>-0.081801</td>\n",
       "      <td>-0.015319</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>0.023338</td>\n",
       "      <td>-0.281954</td>\n",
       "      <td>0.496246</td>\n",
       "      <td>0.261016</td>\n",
       "      <td>0</td>\n",
       "      <td>0.322907</td>\n",
       "      <td>0</td>\n",
       "      <td>0.283260</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-0.056148</td>\n",
       "      <td>0.631312</td>\n",
       "      <td>-0.755823</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.061181</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>0.203356</td>\n",
       "      <td>0.319414</td>\n",
       "      <td>0</td>\n",
       "      <td>0.383947</td>\n",
       "      <td>0</td>\n",
       "      <td>0.346321</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-0.024350</td>\n",
       "      <td>-0.119602</td>\n",
       "      <td>-0.230102</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>-0.333946</td>\n",
       "      <td>0.093127</td>\n",
       "      <td>0.086501</td>\n",
       "      <td>0.285785</td>\n",
       "      <td>0</td>\n",
       "      <td>0.329583</td>\n",
       "      <td>0</td>\n",
       "      <td>0.302516</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.327287</td>\n",
       "      <td>0.181109</td>\n",
       "      <td>-0.407402</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>0.268413</td>\n",
       "      <td>-0.344467</td>\n",
       "      <td>0.547076</td>\n",
       "      <td>0.277358</td>\n",
       "      <td>0</td>\n",
       "      <td>0.332096</td>\n",
       "      <td>0</td>\n",
       "      <td>0.297050</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22266</td>\n",
       "      <td>-0.024350</td>\n",
       "      <td>0.149516</td>\n",
       "      <td>-0.689989</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>-0.070698</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>-0.206234</td>\n",
       "      <td>0.102080</td>\n",
       "      <td>0</td>\n",
       "      <td>0.117594</td>\n",
       "      <td>0</td>\n",
       "      <td>0.108476</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22267</td>\n",
       "      <td>-0.026622</td>\n",
       "      <td>-0.131474</td>\n",
       "      <td>-0.086444</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.048761</td>\n",
       "      <td>0.280668</td>\n",
       "      <td>-0.172992</td>\n",
       "      <td>0.169309</td>\n",
       "      <td>0</td>\n",
       "      <td>0.203984</td>\n",
       "      <td>0</td>\n",
       "      <td>0.185150</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22268</td>\n",
       "      <td>0.333209</td>\n",
       "      <td>0.112942</td>\n",
       "      <td>-0.047254</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>-0.256300</td>\n",
       "      <td>-0.261116</td>\n",
       "      <td>-0.199849</td>\n",
       "      <td>0.486636</td>\n",
       "      <td>0</td>\n",
       "      <td>0.513328</td>\n",
       "      <td>0</td>\n",
       "      <td>0.496881</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22269</td>\n",
       "      <td>0.008569</td>\n",
       "      <td>-0.163106</td>\n",
       "      <td>3.309301</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>0.126994</td>\n",
       "      <td>0.155641</td>\n",
       "      <td>0.067068</td>\n",
       "      <td>0.267197</td>\n",
       "      <td>0</td>\n",
       "      <td>0.324126</td>\n",
       "      <td>0</td>\n",
       "      <td>0.290761</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22270</td>\n",
       "      <td>-0.065952</td>\n",
       "      <td>-0.154099</td>\n",
       "      <td>0.162624</td>\n",
       "      <td>-0.864066</td>\n",
       "      <td>-0.014093</td>\n",
       "      <td>-0.261116</td>\n",
       "      <td>-0.251227</td>\n",
       "      <td>0.141624</td>\n",
       "      <td>0</td>\n",
       "      <td>0.185677</td>\n",
       "      <td>0</td>\n",
       "      <td>0.159115</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>22271 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              0         1         2         3         4         5         6  \\\n",
       "0     -0.090945  0.033055 -0.745771 -0.645352 -0.078603 -0.386143 -0.218227   \n",
       "1      0.160945 -0.081801 -0.015319 -0.645352  0.023338 -0.281954  0.496246   \n",
       "2     -0.056148  0.631312 -0.755823 -0.207923  0.061181 -0.406981  0.203356   \n",
       "3     -0.024350 -0.119602 -0.230102  1.104362 -0.333946  0.093127  0.086501   \n",
       "4      0.327287  0.181109 -0.407402  1.104362  0.268413 -0.344467  0.547076   \n",
       "...         ...       ...       ...       ...       ...       ...       ...   \n",
       "22266 -0.024350  0.149516 -0.689989  1.104362 -0.070698 -0.406981 -0.206234   \n",
       "22267 -0.026622 -0.131474 -0.086444 -0.207923  0.048761  0.280668 -0.172992   \n",
       "22268  0.333209  0.112942 -0.047254 -0.645352 -0.256300 -0.261116 -0.199849   \n",
       "22269  0.008569 -0.163106  3.309301  1.104362  0.126994  0.155641  0.067068   \n",
       "22270 -0.065952 -0.154099  0.162624 -0.864066 -0.014093 -0.261116 -0.251227   \n",
       "\n",
       "       y_by_average_score  y_by_average_cluster  y_by_maximization_score  \\\n",
       "0                0.074366                     0                 0.087358   \n",
       "1                0.261016                     0                 0.322907   \n",
       "2                0.319414                     0                 0.383947   \n",
       "3                0.285785                     0                 0.329583   \n",
       "4                0.277358                     0                 0.332096   \n",
       "...                   ...                   ...                      ...   \n",
       "22266            0.102080                     0                 0.117594   \n",
       "22267            0.169309                     0                 0.203984   \n",
       "22268            0.486636                     0                 0.513328   \n",
       "22269            0.267197                     0                 0.324126   \n",
       "22270            0.141624                     0                 0.185677   \n",
       "\n",
       "       y_by_maximization_cluster  y_by_aom_score  y_by_aom_cluster  \n",
       "0                              0        0.080360                 0  \n",
       "1                              0        0.283260                 0  \n",
       "2                              0        0.346321                 0  \n",
       "3                              0        0.302516                 0  \n",
       "4                              0        0.297050                 0  \n",
       "...                          ...             ...               ...  \n",
       "22266                          0        0.108476                 0  \n",
       "22267                          0        0.185150                 0  \n",
       "22268                          0        0.496881                 0  \n",
       "22269                          0        0.290761                 0  \n",
       "22270                          0        0.159115                 0  \n",
       "\n",
       "[22271 rows x 13 columns]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>y_by_average_score</th>\n",
       "      <th>y_by_average_cluster</th>\n",
       "      <th>y_by_maximization_score</th>\n",
       "      <th>y_by_maximization_cluster</th>\n",
       "      <th>y_by_aom_score</th>\n",
       "      <th>y_by_aom_cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>51</td>\n",
       "      <td>0.264567</td>\n",
       "      <td>0.099805</td>\n",
       "      <td>-0.239343</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.356041</td>\n",
       "      <td>-0.344467</td>\n",
       "      <td>1.824652</td>\n",
       "      <td>0.630138</td>\n",
       "      <td>1</td>\n",
       "      <td>0.782640</td>\n",
       "      <td>0</td>\n",
       "      <td>0.691416</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>53</td>\n",
       "      <td>0.005577</td>\n",
       "      <td>-0.156779</td>\n",
       "      <td>1.617491</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>0.088137</td>\n",
       "      <td>2.843723</td>\n",
       "      <td>-0.035824</td>\n",
       "      <td>0.658137</td>\n",
       "      <td>1</td>\n",
       "      <td>0.891090</td>\n",
       "      <td>1</td>\n",
       "      <td>0.756447</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>142</td>\n",
       "      <td>0.220298</td>\n",
       "      <td>-0.124934</td>\n",
       "      <td>1.925646</td>\n",
       "      <td>-0.864066</td>\n",
       "      <td>0.306090</td>\n",
       "      <td>1.921648</td>\n",
       "      <td>-0.099305</td>\n",
       "      <td>0.633077</td>\n",
       "      <td>1</td>\n",
       "      <td>0.703747</td>\n",
       "      <td>0</td>\n",
       "      <td>0.663837</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>161</td>\n",
       "      <td>0.195111</td>\n",
       "      <td>-0.126623</td>\n",
       "      <td>1.249867</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>0.314349</td>\n",
       "      <td>-0.281954</td>\n",
       "      <td>2.088255</td>\n",
       "      <td>0.735937</td>\n",
       "      <td>1</td>\n",
       "      <td>0.937262</td>\n",
       "      <td>1</td>\n",
       "      <td>0.828447</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>191</td>\n",
       "      <td>-0.099246</td>\n",
       "      <td>-0.169036</td>\n",
       "      <td>1.264381</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>-0.028849</td>\n",
       "      <td>3.312575</td>\n",
       "      <td>-0.131003</td>\n",
       "      <td>0.641503</td>\n",
       "      <td>1</td>\n",
       "      <td>0.853051</td>\n",
       "      <td>1</td>\n",
       "      <td>0.735436</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22167</td>\n",
       "      <td>1.472193</td>\n",
       "      <td>0.620082</td>\n",
       "      <td>-0.191736</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>1.907115</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>3.362091</td>\n",
       "      <td>1.505169</td>\n",
       "      <td>1</td>\n",
       "      <td>1.815878</td>\n",
       "      <td>1</td>\n",
       "      <td>1.639418</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22176</td>\n",
       "      <td>0.096811</td>\n",
       "      <td>-0.156797</td>\n",
       "      <td>3.309301</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>0.192357</td>\n",
       "      <td>3.843940</td>\n",
       "      <td>0.143294</td>\n",
       "      <td>0.938955</td>\n",
       "      <td>1</td>\n",
       "      <td>1.288590</td>\n",
       "      <td>1</td>\n",
       "      <td>1.063935</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22217</td>\n",
       "      <td>0.914345</td>\n",
       "      <td>0.464671</td>\n",
       "      <td>-0.304089</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.903411</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>2.126427</td>\n",
       "      <td>0.942500</td>\n",
       "      <td>1</td>\n",
       "      <td>1.131004</td>\n",
       "      <td>1</td>\n",
       "      <td>1.029981</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22253</td>\n",
       "      <td>0.899382</td>\n",
       "      <td>-0.018143</td>\n",
       "      <td>1.157002</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>0.295993</td>\n",
       "      <td>0.280668</td>\n",
       "      <td>0.548819</td>\n",
       "      <td>0.739150</td>\n",
       "      <td>1</td>\n",
       "      <td>0.812153</td>\n",
       "      <td>1</td>\n",
       "      <td>0.774422</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22261</td>\n",
       "      <td>-0.028340</td>\n",
       "      <td>-0.143699</td>\n",
       "      <td>0.188599</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>-0.001987</td>\n",
       "      <td>0.186898</td>\n",
       "      <td>1.109729</td>\n",
       "      <td>0.644107</td>\n",
       "      <td>1</td>\n",
       "      <td>0.723534</td>\n",
       "      <td>0</td>\n",
       "      <td>0.675323</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1170 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              0         1         2         3         4         5         6  \\\n",
       "51     0.264567  0.099805 -0.239343 -0.207923  0.356041 -0.344467  1.824652   \n",
       "53     0.005577 -0.156779  1.617491  1.104362  0.088137  2.843723 -0.035824   \n",
       "142    0.220298 -0.124934  1.925646 -0.864066  0.306090  1.921648 -0.099305   \n",
       "161    0.195111 -0.126623  1.249867  1.104362  0.314349 -0.281954  2.088255   \n",
       "191   -0.099246 -0.169036  1.264381 -0.207923 -0.028849  3.312575 -0.131003   \n",
       "...         ...       ...       ...       ...       ...       ...       ...   \n",
       "22167  1.472193  0.620082 -0.191736  1.104362  1.907115 -0.406981  3.362091   \n",
       "22176  0.096811 -0.156797  3.309301 -0.645352  0.192357  3.843940  0.143294   \n",
       "22217  0.914345  0.464671 -0.304089 -0.207923  0.903411 -0.406981  2.126427   \n",
       "22253  0.899382 -0.018143  1.157002  1.104362  0.295993  0.280668  0.548819   \n",
       "22261 -0.028340 -0.143699  0.188599 -0.207923 -0.001987  0.186898  1.109729   \n",
       "\n",
       "       y_by_average_score  y_by_average_cluster  y_by_maximization_score  \\\n",
       "51               0.630138                     1                 0.782640   \n",
       "53               0.658137                     1                 0.891090   \n",
       "142              0.633077                     1                 0.703747   \n",
       "161              0.735937                     1                 0.937262   \n",
       "191              0.641503                     1                 0.853051   \n",
       "...                   ...                   ...                      ...   \n",
       "22167            1.505169                     1                 1.815878   \n",
       "22176            0.938955                     1                 1.288590   \n",
       "22217            0.942500                     1                 1.131004   \n",
       "22253            0.739150                     1                 0.812153   \n",
       "22261            0.644107                     1                 0.723534   \n",
       "\n",
       "       y_by_maximization_cluster  y_by_aom_score  y_by_aom_cluster  \n",
       "51                             0        0.691416                 0  \n",
       "53                             1        0.756447                 0  \n",
       "142                            0        0.663837                 0  \n",
       "161                            1        0.828447                 1  \n",
       "191                            1        0.735436                 0  \n",
       "...                          ...             ...               ...  \n",
       "22167                          1        1.639418                 1  \n",
       "22176                          1        1.063935                 1  \n",
       "22217                          1        1.029981                 1  \n",
       "22253                          1        0.774422                 0  \n",
       "22261                          0        0.675323                 0  \n",
       "\n",
       "[1170 rows x 13 columns]"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test[df_test['y_by_average_cluster']==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_test_analysis=df_test[(df_test['y_by_average_cluster'] == 1) & (df_test['y_by_maximization_cluster'] ==1) & (df_test['y_by_aom_cluster'] ==1) ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Only taking the cases where all these combination methods identify cases as anomalous"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>y_by_average_score</th>\n",
       "      <th>y_by_average_cluster</th>\n",
       "      <th>y_by_maximization_score</th>\n",
       "      <th>y_by_maximization_cluster</th>\n",
       "      <th>y_by_aom_score</th>\n",
       "      <th>y_by_aom_cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>161</td>\n",
       "      <td>0.195111</td>\n",
       "      <td>-0.126623</td>\n",
       "      <td>1.249867</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>0.314349</td>\n",
       "      <td>-0.281954</td>\n",
       "      <td>2.088255</td>\n",
       "      <td>0.735937</td>\n",
       "      <td>1</td>\n",
       "      <td>0.937262</td>\n",
       "      <td>1</td>\n",
       "      <td>0.828447</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>201</td>\n",
       "      <td>3.233410</td>\n",
       "      <td>30.019643</td>\n",
       "      <td>-0.742512</td>\n",
       "      <td>-1.345238</td>\n",
       "      <td>2.516419</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>0.904985</td>\n",
       "      <td>9.267408</td>\n",
       "      <td>1</td>\n",
       "      <td>19.812676</td>\n",
       "      <td>1</td>\n",
       "      <td>12.293908</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>233</td>\n",
       "      <td>0.046264</td>\n",
       "      <td>-0.156029</td>\n",
       "      <td>2.646595</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.131352</td>\n",
       "      <td>3.156291</td>\n",
       "      <td>0.878467</td>\n",
       "      <td>1.176722</td>\n",
       "      <td>1</td>\n",
       "      <td>1.298001</td>\n",
       "      <td>1</td>\n",
       "      <td>1.225426</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>246</td>\n",
       "      <td>0.369484</td>\n",
       "      <td>-0.102263</td>\n",
       "      <td>1.535332</td>\n",
       "      <td>-0.995295</td>\n",
       "      <td>0.323035</td>\n",
       "      <td>0.380690</td>\n",
       "      <td>1.309177</td>\n",
       "      <td>0.761837</td>\n",
       "      <td>1</td>\n",
       "      <td>0.885045</td>\n",
       "      <td>1</td>\n",
       "      <td>0.814256</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>255</td>\n",
       "      <td>0.722589</td>\n",
       "      <td>0.066518</td>\n",
       "      <td>0.385974</td>\n",
       "      <td>-0.864066</td>\n",
       "      <td>0.908387</td>\n",
       "      <td>-0.375724</td>\n",
       "      <td>1.508038</td>\n",
       "      <td>0.772304</td>\n",
       "      <td>1</td>\n",
       "      <td>0.906912</td>\n",
       "      <td>1</td>\n",
       "      <td>0.833152</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22050</td>\n",
       "      <td>-0.075474</td>\n",
       "      <td>2.544210</td>\n",
       "      <td>-0.775305</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>-0.168599</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>-0.263253</td>\n",
       "      <td>0.718363</td>\n",
       "      <td>1</td>\n",
       "      <td>1.090826</td>\n",
       "      <td>1</td>\n",
       "      <td>0.860285</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22056</td>\n",
       "      <td>3.718035</td>\n",
       "      <td>1.395866</td>\n",
       "      <td>-0.028532</td>\n",
       "      <td>-0.864066</td>\n",
       "      <td>1.870250</td>\n",
       "      <td>-0.313211</td>\n",
       "      <td>4.683603</td>\n",
       "      <td>2.741331</td>\n",
       "      <td>1</td>\n",
       "      <td>3.233475</td>\n",
       "      <td>1</td>\n",
       "      <td>2.963745</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22167</td>\n",
       "      <td>1.472193</td>\n",
       "      <td>0.620082</td>\n",
       "      <td>-0.191736</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>1.907115</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>3.362091</td>\n",
       "      <td>1.505169</td>\n",
       "      <td>1</td>\n",
       "      <td>1.815878</td>\n",
       "      <td>1</td>\n",
       "      <td>1.639418</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22176</td>\n",
       "      <td>0.096811</td>\n",
       "      <td>-0.156797</td>\n",
       "      <td>3.309301</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>0.192357</td>\n",
       "      <td>3.843940</td>\n",
       "      <td>0.143294</td>\n",
       "      <td>0.938955</td>\n",
       "      <td>1</td>\n",
       "      <td>1.288590</td>\n",
       "      <td>1</td>\n",
       "      <td>1.063935</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22217</td>\n",
       "      <td>0.914345</td>\n",
       "      <td>0.464671</td>\n",
       "      <td>-0.304089</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.903411</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>2.126427</td>\n",
       "      <td>0.942500</td>\n",
       "      <td>1</td>\n",
       "      <td>1.131004</td>\n",
       "      <td>1</td>\n",
       "      <td>1.029981</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>815 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              0          1         2         3         4         5         6  \\\n",
       "161    0.195111  -0.126623  1.249867  1.104362  0.314349 -0.281954  2.088255   \n",
       "201    3.233410  30.019643 -0.742512 -1.345238  2.516419 -0.406981  0.904985   \n",
       "233    0.046264  -0.156029  2.646595 -0.207923  0.131352  3.156291  0.878467   \n",
       "246    0.369484  -0.102263  1.535332 -0.995295  0.323035  0.380690  1.309177   \n",
       "255    0.722589   0.066518  0.385974 -0.864066  0.908387 -0.375724  1.508038   \n",
       "...         ...        ...       ...       ...       ...       ...       ...   \n",
       "22050 -0.075474   2.544210 -0.775305  1.104362 -0.168599 -0.406981 -0.263253   \n",
       "22056  3.718035   1.395866 -0.028532 -0.864066  1.870250 -0.313211  4.683603   \n",
       "22167  1.472193   0.620082 -0.191736  1.104362  1.907115 -0.406981  3.362091   \n",
       "22176  0.096811  -0.156797  3.309301 -0.645352  0.192357  3.843940  0.143294   \n",
       "22217  0.914345   0.464671 -0.304089 -0.207923  0.903411 -0.406981  2.126427   \n",
       "\n",
       "       y_by_average_score  y_by_average_cluster  y_by_maximization_score  \\\n",
       "161              0.735937                     1                 0.937262   \n",
       "201              9.267408                     1                19.812676   \n",
       "233              1.176722                     1                 1.298001   \n",
       "246              0.761837                     1                 0.885045   \n",
       "255              0.772304                     1                 0.906912   \n",
       "...                   ...                   ...                      ...   \n",
       "22050            0.718363                     1                 1.090826   \n",
       "22056            2.741331                     1                 3.233475   \n",
       "22167            1.505169                     1                 1.815878   \n",
       "22176            0.938955                     1                 1.288590   \n",
       "22217            0.942500                     1                 1.131004   \n",
       "\n",
       "       y_by_maximization_cluster  y_by_aom_score  y_by_aom_cluster  \n",
       "161                            1        0.828447                 1  \n",
       "201                            1       12.293908                 1  \n",
       "233                            1        1.225426                 1  \n",
       "246                            1        0.814256                 1  \n",
       "255                            1        0.833152                 1  \n",
       "...                          ...             ...               ...  \n",
       "22050                          1        0.860285                 1  \n",
       "22056                          1        2.963745                 1  \n",
       "22167                          1        1.639418                 1  \n",
       "22176                          1        1.063935                 1  \n",
       "22217                          1        1.029981                 1  \n",
       "\n",
       "[815 rows x 13 columns]"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test_analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_test_d=df_test_analysis.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>y_by_average_score</th>\n",
       "      <th>y_by_average_cluster</th>\n",
       "      <th>y_by_maximization_score</th>\n",
       "      <th>y_by_maximization_cluster</th>\n",
       "      <th>y_by_aom_score</th>\n",
       "      <th>y_by_aom_cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>161</td>\n",
       "      <td>0.195111</td>\n",
       "      <td>-0.126623</td>\n",
       "      <td>1.249867</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>0.314349</td>\n",
       "      <td>-0.281954</td>\n",
       "      <td>2.088255</td>\n",
       "      <td>0.735937</td>\n",
       "      <td>1</td>\n",
       "      <td>0.937262</td>\n",
       "      <td>1</td>\n",
       "      <td>0.828447</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>201</td>\n",
       "      <td>3.233410</td>\n",
       "      <td>30.019643</td>\n",
       "      <td>-0.742512</td>\n",
       "      <td>-1.345238</td>\n",
       "      <td>2.516419</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>0.904985</td>\n",
       "      <td>9.267408</td>\n",
       "      <td>1</td>\n",
       "      <td>19.812676</td>\n",
       "      <td>1</td>\n",
       "      <td>12.293908</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>233</td>\n",
       "      <td>0.046264</td>\n",
       "      <td>-0.156029</td>\n",
       "      <td>2.646595</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.131352</td>\n",
       "      <td>3.156291</td>\n",
       "      <td>0.878467</td>\n",
       "      <td>1.176722</td>\n",
       "      <td>1</td>\n",
       "      <td>1.298001</td>\n",
       "      <td>1</td>\n",
       "      <td>1.225426</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>246</td>\n",
       "      <td>0.369484</td>\n",
       "      <td>-0.102263</td>\n",
       "      <td>1.535332</td>\n",
       "      <td>-0.995295</td>\n",
       "      <td>0.323035</td>\n",
       "      <td>0.380690</td>\n",
       "      <td>1.309177</td>\n",
       "      <td>0.761837</td>\n",
       "      <td>1</td>\n",
       "      <td>0.885045</td>\n",
       "      <td>1</td>\n",
       "      <td>0.814256</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>255</td>\n",
       "      <td>0.722589</td>\n",
       "      <td>0.066518</td>\n",
       "      <td>0.385974</td>\n",
       "      <td>-0.864066</td>\n",
       "      <td>0.908387</td>\n",
       "      <td>-0.375724</td>\n",
       "      <td>1.508038</td>\n",
       "      <td>0.772304</td>\n",
       "      <td>1</td>\n",
       "      <td>0.906912</td>\n",
       "      <td>1</td>\n",
       "      <td>0.833152</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>810</td>\n",
       "      <td>22050</td>\n",
       "      <td>-0.075474</td>\n",
       "      <td>2.544210</td>\n",
       "      <td>-0.775305</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>-0.168599</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>-0.263253</td>\n",
       "      <td>0.718363</td>\n",
       "      <td>1</td>\n",
       "      <td>1.090826</td>\n",
       "      <td>1</td>\n",
       "      <td>0.860285</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>811</td>\n",
       "      <td>22056</td>\n",
       "      <td>3.718035</td>\n",
       "      <td>1.395866</td>\n",
       "      <td>-0.028532</td>\n",
       "      <td>-0.864066</td>\n",
       "      <td>1.870250</td>\n",
       "      <td>-0.313211</td>\n",
       "      <td>4.683603</td>\n",
       "      <td>2.741331</td>\n",
       "      <td>1</td>\n",
       "      <td>3.233475</td>\n",
       "      <td>1</td>\n",
       "      <td>2.963745</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>812</td>\n",
       "      <td>22167</td>\n",
       "      <td>1.472193</td>\n",
       "      <td>0.620082</td>\n",
       "      <td>-0.191736</td>\n",
       "      <td>1.104362</td>\n",
       "      <td>1.907115</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>3.362091</td>\n",
       "      <td>1.505169</td>\n",
       "      <td>1</td>\n",
       "      <td>1.815878</td>\n",
       "      <td>1</td>\n",
       "      <td>1.639418</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>813</td>\n",
       "      <td>22176</td>\n",
       "      <td>0.096811</td>\n",
       "      <td>-0.156797</td>\n",
       "      <td>3.309301</td>\n",
       "      <td>-0.645352</td>\n",
       "      <td>0.192357</td>\n",
       "      <td>3.843940</td>\n",
       "      <td>0.143294</td>\n",
       "      <td>0.938955</td>\n",
       "      <td>1</td>\n",
       "      <td>1.288590</td>\n",
       "      <td>1</td>\n",
       "      <td>1.063935</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>814</td>\n",
       "      <td>22217</td>\n",
       "      <td>0.914345</td>\n",
       "      <td>0.464671</td>\n",
       "      <td>-0.304089</td>\n",
       "      <td>-0.207923</td>\n",
       "      <td>0.903411</td>\n",
       "      <td>-0.406981</td>\n",
       "      <td>2.126427</td>\n",
       "      <td>0.942500</td>\n",
       "      <td>1</td>\n",
       "      <td>1.131004</td>\n",
       "      <td>1</td>\n",
       "      <td>1.029981</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>815 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index         0          1         2         3         4         5  \\\n",
       "0      161  0.195111  -0.126623  1.249867  1.104362  0.314349 -0.281954   \n",
       "1      201  3.233410  30.019643 -0.742512 -1.345238  2.516419 -0.406981   \n",
       "2      233  0.046264  -0.156029  2.646595 -0.207923  0.131352  3.156291   \n",
       "3      246  0.369484  -0.102263  1.535332 -0.995295  0.323035  0.380690   \n",
       "4      255  0.722589   0.066518  0.385974 -0.864066  0.908387 -0.375724   \n",
       "..     ...       ...        ...       ...       ...       ...       ...   \n",
       "810  22050 -0.075474   2.544210 -0.775305  1.104362 -0.168599 -0.406981   \n",
       "811  22056  3.718035   1.395866 -0.028532 -0.864066  1.870250 -0.313211   \n",
       "812  22167  1.472193   0.620082 -0.191736  1.104362  1.907115 -0.406981   \n",
       "813  22176  0.096811  -0.156797  3.309301 -0.645352  0.192357  3.843940   \n",
       "814  22217  0.914345   0.464671 -0.304089 -0.207923  0.903411 -0.406981   \n",
       "\n",
       "            6  y_by_average_score  y_by_average_cluster  \\\n",
       "0    2.088255            0.735937                     1   \n",
       "1    0.904985            9.267408                     1   \n",
       "2    0.878467            1.176722                     1   \n",
       "3    1.309177            0.761837                     1   \n",
       "4    1.508038            0.772304                     1   \n",
       "..        ...                 ...                   ...   \n",
       "810 -0.263253            0.718363                     1   \n",
       "811  4.683603            2.741331                     1   \n",
       "812  3.362091            1.505169                     1   \n",
       "813  0.143294            0.938955                     1   \n",
       "814  2.126427            0.942500                     1   \n",
       "\n",
       "     y_by_maximization_score  y_by_maximization_cluster  y_by_aom_score  \\\n",
       "0                   0.937262                          1        0.828447   \n",
       "1                  19.812676                          1       12.293908   \n",
       "2                   1.298001                          1        1.225426   \n",
       "3                   0.885045                          1        0.814256   \n",
       "4                   0.906912                          1        0.833152   \n",
       "..                       ...                        ...             ...   \n",
       "810                 1.090826                          1        0.860285   \n",
       "811                 3.233475                          1        2.963745   \n",
       "812                 1.815878                          1        1.639418   \n",
       "813                 1.288590                          1        1.063935   \n",
       "814                 1.131004                          1        1.029981   \n",
       "\n",
       "     y_by_aom_cluster  \n",
       "0                   1  \n",
       "1                   1  \n",
       "2                   1  \n",
       "3                   1  \n",
       "4                   1  \n",
       "..                ...  \n",
       "810                 1  \n",
       "811                 1  \n",
       "812                 1  \n",
       "813                 1  \n",
       "814                 1  \n",
       "\n",
       "[815 rows x 14 columns]"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test_d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23002      R GEISSLER\n",
       "17249       T Magness\n",
       "54664       A Richard\n",
       "918        R SCHROYER\n",
       "45275    C ZACCARELLI\n",
       "             ...     \n",
       "65348        W Beagle\n",
       "48035       V Lacombe\n",
       "27269         B Smith\n",
       "38353        C Santos\n",
       "26445       G MCGOWIN\n",
       "Name: FullName, Length: 22271, dtype: object"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test_df=pd.DataFrame({'FullName': y_test})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FullName</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>23002</td>\n",
       "      <td>R GEISSLER</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17249</td>\n",
       "      <td>T Magness</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>54664</td>\n",
       "      <td>A Richard</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>918</td>\n",
       "      <td>R SCHROYER</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45275</td>\n",
       "      <td>C ZACCARELLI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>65348</td>\n",
       "      <td>W Beagle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>48035</td>\n",
       "      <td>V Lacombe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27269</td>\n",
       "      <td>B Smith</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38353</td>\n",
       "      <td>C Santos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>26445</td>\n",
       "      <td>G MCGOWIN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>22271 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           FullName\n",
       "23002    R GEISSLER\n",
       "17249     T Magness\n",
       "54664     A Richard\n",
       "918      R SCHROYER\n",
       "45275  C ZACCARELLI\n",
       "...             ...\n",
       "65348      W Beagle\n",
       "48035     V Lacombe\n",
       "27269       B Smith\n",
       "38353      C Santos\n",
       "26445     G MCGOWIN\n",
       "\n",
       "[22271 rows x 1 columns]"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test_df['Index'] = np.arange(len(y_test_df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FullName</th>\n",
       "      <th>Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>23002</td>\n",
       "      <td>R GEISSLER</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17249</td>\n",
       "      <td>T Magness</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>54664</td>\n",
       "      <td>A Richard</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>918</td>\n",
       "      <td>R SCHROYER</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45275</td>\n",
       "      <td>C ZACCARELLI</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>65348</td>\n",
       "      <td>W Beagle</td>\n",
       "      <td>22266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>48035</td>\n",
       "      <td>V Lacombe</td>\n",
       "      <td>22267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27269</td>\n",
       "      <td>B Smith</td>\n",
       "      <td>22268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38353</td>\n",
       "      <td>C Santos</td>\n",
       "      <td>22269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>26445</td>\n",
       "      <td>G MCGOWIN</td>\n",
       "      <td>22270</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>22271 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           FullName  Index\n",
       "23002    R GEISSLER      0\n",
       "17249     T Magness      1\n",
       "54664     A Richard      2\n",
       "918      R SCHROYER      3\n",
       "45275  C ZACCARELLI      4\n",
       "...             ...    ...\n",
       "65348      W Beagle  22266\n",
       "48035     V Lacombe  22267\n",
       "27269       B Smith  22268\n",
       "38353      C Santos  22269\n",
       "26445     G MCGOWIN  22270\n",
       "\n",
       "[22271 rows x 2 columns]"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create a dataframe to identify all the anomaly cases with focus on the fullname of potential fraud users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "anomalies=pd.merge(y_test_df,df_test_d,left_on='Index',right_on='index')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "e Cardholder                  21\n",
       "G UNIVERSITY AMERICAN         19\n",
       "G JOURNEY HOUSE TRAVEL INC    18\n",
       "B LARSON                      13\n",
       "P Gadberry                    10\n",
       "                              ..\n",
       "A Myatt                        1\n",
       "S SASSO                        1\n",
       "B HARKINS                      1\n",
       "N LEONARD                      1\n",
       "B Brinker                      1\n",
       "Name: FullName, Length: 567, dtype: int64"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counts=anomalies['FullName'].value_counts()\n",
    "counts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Of 5200 users, 567 unique users feature atleast once in the anomaly list. However, I would believe that a user with just one entry in the list could be removed for further analysis since a user for a particular merchant category could make some abnormal transactions as it could be his profession or many other factors causing that transaction. But if a user appears more than once with other MCC then we need to be carefully inspect going ahead. Hence we are interested in people appearing more than once in this anomalous list. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "e Cardholder                  21\n",
       "G UNIVERSITY AMERICAN         19\n",
       "G JOURNEY HOUSE TRAVEL INC    18\n",
       "B LARSON                      13\n",
       "P Gadberry                    10\n",
       "                              ..\n",
       "G Courson                      2\n",
       "P Hoyt                         2\n",
       "M Lewis                        2\n",
       "X Guo                          2\n",
       "T NARANJO                      2\n",
       "Name: FullName, Length: 92, dtype: int64"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counts[counts>1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Interesting to note that from 567 users, we are only left with 92 users when we apply this filter. So finally I would say I am more suspicious about these 92 users (comprising 1.75 percent of total users in the sample dataset). Especially, e Cardholder, B Larson, P Gadberry etc. having more than 10 appearances in the anomalous cluster. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
